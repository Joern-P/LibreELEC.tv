--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.h	2019-06-22 17:16:22.000000000 +0000
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.h	2019-08-21 15:16:28.000000000 +0000
@@ -1,45 +1,54 @@
-/*
- *  Copyright (C) 2017-2018 Team Kodi
- *  This file is part of Kodi - https://kodi.tv
- *
- *  SPDX-License-Identifier: GPL-2.0-or-later
- *  See LICENSES/README.md for more information.
- */
-
-#pragma once
-
-#include <memory>
-#include "cores/VideoPlayer/DVDStreamInfo.h"
-#include "cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h"
-#include "cores/VideoPlayer/Process/VideoBuffer.h"
-
-class CDVDVideoCodecDRMPRIME
-  : public CDVDVideoCodec
-{
-public:
-  explicit CDVDVideoCodecDRMPRIME(CProcessInfo& processInfo);
-  ~CDVDVideoCodecDRMPRIME();
-
-  static CDVDVideoCodec* Create(CProcessInfo& processInfo);
-  static void Register();
-
-  bool Open(CDVDStreamInfo& hints, CDVDCodecOptions& options) override;
-  bool AddData(const DemuxPacket& packet) override;
-  void Reset() override;
-  CDVDVideoCodec::VCReturn GetPicture(VideoPicture* pVideoPicture) override;
-  const char* GetName() override { return m_name.c_str(); };
-  unsigned GetAllowedReferences() override { return 5; };
-  void SetCodecControl(int flags) override { m_codecControlFlags = flags; };
-
-protected:
-  void Drain();
-  void SetPictureParams(VideoPicture* pVideoPicture);
-  void UpdateProcessInfo(struct AVCodecContext* avctx, const enum AVPixelFormat fmt);
-  static enum AVPixelFormat GetFormat(struct AVCodecContext* avctx, const enum AVPixelFormat* fmt);
-
-  std::string m_name;
-  int m_codecControlFlags = 0;
-  AVCodecContext* m_pCodecContext = nullptr;
-  AVFrame* m_pFrame = nullptr;
-  std::shared_ptr<IVideoBufferPool> m_videoBufferPool;
-};
+/*
+ *  Copyright (C) 2017-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include <memory>
+#include "cores/VideoPlayer/DVDStreamInfo.h"
+#include "cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h"
+#include "cores/VideoPlayer/Process/VideoBuffer.h"
+
+struct h264_sequence;
+
+class CDVDVideoCodecDRMPRIME
+  : public CDVDVideoCodec
+{
+public:
+  explicit CDVDVideoCodecDRMPRIME(CProcessInfo& processInfo);
+  ~CDVDVideoCodecDRMPRIME();
+
+  static CDVDVideoCodec* Create(CProcessInfo& processInfo);
+  static void Register();
+
+  bool Open(CDVDStreamInfo& hints, CDVDCodecOptions& options) override;
+  bool AddData(const DemuxPacket& packet) override;
+  void Reset() override;
+  CDVDVideoCodec::VCReturn GetPicture(VideoPicture* pVideoPicture) override;
+  const char* GetName() override { return m_name.c_str(); };
+  unsigned GetAllowedReferences() override { return 5; };
+  void SetCodecControl(int flags) override { m_codecControlFlags = flags; };
+
+protected:
+  void Drain();
+  void Dispose(void);
+  void SetPictureParams(VideoPicture* pVideoPicture);
+  void UpdateProcessInfo(struct AVCodecContext* avctx, const enum AVPixelFormat fmt);
+  void FrameRateTracking(uint8_t *pData, int iSize, double dts, double pts);
+  static enum AVPixelFormat GetFormat(struct AVCodecContext* avctx, const enum AVPixelFormat* fmt);
+  
+  CDVDStreamInfo  m_hints;
+  float           m_aspect_ratio;
+  h264_sequence *m_h264_sequence;
+  double          m_h264_sequence_pts;
+
+  std::string m_name;
+  int m_codecControlFlags = 0;
+  AVCodecContext* m_pCodecContext = nullptr;
+  AVFrame* m_pFrame = nullptr;
+  std::shared_ptr<IVideoBufferPool> m_videoBufferPool;
+};
