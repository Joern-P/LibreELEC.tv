From e0b0441e4163fbc5c8b1cf91456d0fa9be54220f Mon Sep 17 00:00:00 2001
From: mrfixit3000 <mrfixit2001@gmail.com>
Date: Wed, 4 Mar 2020 11:02:43 -0500
Subject: [PATCH] Update to 4.4.215

---
 Makefile                                      |   2 +-
 arch/arm/Kconfig                              |   2 +-
 arch/arm/boot/dts/r8a7779.dtsi                |   8 ++
 arch/microblaze/kernel/cpu/cache.c            |   3 +-
 arch/mips/loongson64/loongson-3/platform.c    |   3 +
 arch/s390/include/asm/timex.h                 |   2 +-
 arch/s390/kernel/mcount.S                     |  15 ++-
 arch/sh/include/cpu-sh2a/cpu/sh7269.h         |  11 +-
 arch/x86/entry/vdso/vdso32-setup.c            |   1 +
 arch/x86/include/asm/cpufeatures.h            |   1 +
 arch/x86/include/asm/vgtod.h                  |   7 +-
 arch/x86/kernel/cpu/mcheck/mce_amd.c          |  17 +--
 arch/x86/kvm/cpuid.c                          |   7 +-
 arch/x86/kvm/emulate.c                        |  22 +++-
 arch/x86/kvm/lapic.c                          |   4 +-
 arch/x86/kvm/vmx.c                            | 102 +++++++++++++++---
 arch/x86/platform/efi/efi.c                   |  13 +--
 drivers/acpi/acpica/dsfield.c                 |   2 +-
 drivers/acpi/acpica/dswload.c                 |  21 ++++
 drivers/base/dd.c                             |   5 +-
 drivers/block/brd.c                           |  22 +++-
 drivers/block/floppy.c                        |   7 +-
 drivers/clk/qcom/clk-rcg2.c                   |   3 +
 drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c  |  19 +---
 drivers/gpu/drm/gma500/framebuffer.c          |   8 +-
 drivers/gpu/drm/nouveau/nouveau_fence.c       |   2 +-
 .../drm/nouveau/nvkm/engine/disp/channv50.c   |   2 +
 drivers/gpu/drm/radeon/radeon_display.c       |   2 +
 drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf_res.c    |   4 +-
 drivers/hwmon/pmbus/ltc2978.c                 |   4 +-
 drivers/ide/cmd64x.c                          |   3 +
 drivers/ide/serverworks.c                     |   6 ++
 drivers/infiniband/ulp/isert/ib_isert.c       |  12 +++
 drivers/input/touchscreen/edt-ft5x06.c        |   7 ++
 drivers/iommu/arm-smmu-v3.c                   |   3 +-
 drivers/irqchip/irq-gic-v3-its.c              |   2 +-
 drivers/md/bcache/bset.h                      |   3 +-
 drivers/media/i2c/mt9v032.c                   |  10 +-
 drivers/media/platform/sti/bdisp/bdisp-hw.c   |   6 +-
 drivers/net/ethernet/cisco/enic/enic_main.c   |   2 +-
 drivers/net/ethernet/freescale/gianfar.c      |  10 +-
 drivers/net/wan/ixp4xx_hss.c                  |   4 +-
 drivers/net/wireless/b43legacy/main.c         |   5 +-
 .../net/wireless/brcm80211/brcmfmac/sdio.c    |   1 +
 drivers/net/wireless/hostap/hostap_ap.c       |   2 +-
 drivers/net/wireless/ipw2x00/ipw2100.c        |   7 +-
 drivers/net/wireless/ipw2x00/ipw2200.c        |   5 +-
 drivers/net/wireless/iwlegacy/3945-mac.c      |   5 +-
 drivers/net/wireless/iwlegacy/4965-mac.c      |   5 +-
 drivers/net/wireless/iwlegacy/common.c        |   2 +-
 drivers/net/wireless/orinoco/orinoco_usb.c    |   3 +-
 drivers/net/wireless/realtek/rtlwifi/pci.c    |  10 +-
 .../rockchip_wlan/rtl8723bu/rtl8723b_fw.bin   | Bin 0 -> 45048 bytes
 .../rtl8723bu/rtl8723bu_ap_wowlan.bin         | Bin 0 -> 15466 bytes
 .../rockchip_wlan/rtl8723bu/rtl8723bu_bt.bin  | Bin 0 -> 9120 bytes
 .../rockchip_wlan/rtl8723bu/rtl8723bu_nic.bin | Bin 0 -> 27324 bytes
 .../rtl8723bu/rtl8723bu_wowlan.bin            | Bin 0 -> 24698 bytes
 .../rtl8812au/regdb/regulatory.db             | Bin 0 -> 3580 bytes
 .../rtl8812au/regdb/regulatory.db.p7s         | Bin 0 -> 1182 bytes
 drivers/nfc/port100.c                         |   2 +-
 drivers/pci/setup-bus.c                       |  20 +++-
 drivers/pinctrl/sh-pfc/pfc-sh7264.c           |   9 +-
 drivers/pinctrl/sh-pfc/pfc-sh7269.c           |  39 ++++---
 drivers/regulator/rk808-regulator.c           |   2 +-
 drivers/remoteproc/remoteproc_core.c          |   2 +-
 drivers/scsi/aic7xxx/aic7xxx_core.c           |   2 +-
 drivers/scsi/iscsi_tcp.c                      |   4 +
 drivers/scsi/qla2xxx/qla_os.c                 |  19 ++--
 drivers/scsi/scsi_transport_iscsi.c           |  26 ++++-
 drivers/soc/tegra/fuse/tegra-apbmisc.c        |   2 +-
 drivers/staging/android/ashmem.c              |  28 +++++
 .../staging/rtl8188eu/os_dep/ioctl_linux.c    |   4 +-
 drivers/staging/vt6656/dpc.c                  |   2 +-
 drivers/target/iscsi/iscsi_target.c           |  16 +--
 drivers/tty/serial/imx.c                      |   2 +-
 drivers/tty/vt/vt_ioctl.c                     |  75 ++++++-------
 drivers/uio/uio_dmem_genirq.c                 |   6 +-
 drivers/usb/core/hub.c                        |   5 -
 drivers/usb/core/quirks.c                     |   3 +
 drivers/usb/gadget/udc/gr_udc.c               |  16 +--
 drivers/usb/host/xhci-pci.c                   |   4 +-
 drivers/usb/storage/uas.c                     |  23 +++-
 drivers/xen/preempt.c                         |   4 +-
 fs/btrfs/disk-io.c                            |   1 +
 fs/btrfs/extent_map.c                         |  11 ++
 fs/btrfs/ordered-data.c                       |   7 +-
 fs/btrfs/super.c                              |   2 +
 fs/ecryptfs/crypto.c                          |   6 +-
 fs/ecryptfs/keystore.c                        |   2 +-
 fs/ecryptfs/messaging.c                       |   1 +
 fs/ext4/dir.c                                 |  14 +--
 fs/ext4/ext4.h                                |   7 +-
 fs/ext4/inode.c                               |  14 ++-
 fs/ext4/namei.c                               |   8 ++
 fs/jbd2/checkpoint.c                          |   2 +-
 fs/jbd2/commit.c                              |  50 +++++----
 fs/jbd2/journal.c                             |  21 ++--
 fs/jbd2/transaction.c                         |  10 +-
 fs/nfs/Kconfig                                |   2 +-
 fs/ocfs2/journal.h                            |   8 +-
 fs/reiserfs/stree.c                           |   3 +-
 fs/reiserfs/super.c                           |   2 +-
 fs/ubifs/file.c                               |   5 +-
 include/linux/list_nulls.h                    |   8 +-
 include/linux/rculist_nulls.h                 |   8 +-
 include/scsi/iscsi_proto.h                    |   1 -
 include/sound/rawmidi.h                       |   6 +-
 ipc/sem.c                                     |   6 +-
 kernel/padata.c                               |  45 +++-----
 kernel/trace/trace_events_trigger.c           |   5 +-
 kernel/trace/trace_stat.c                     |  19 ++--
 lib/scatterlist.c                             |   2 +-
 net/netfilter/xt_bpf.c                        |   3 +
 scripts/kconfig/confdata.c                    |   2 +-
 security/selinux/avc.c                        |   2 +-
 sound/core/seq/seq_clientmgr.c                |   4 +-
 sound/core/seq/seq_queue.c                    |  29 +++--
 sound/core/seq/seq_timer.c                    |  13 ++-
 sound/core/seq/seq_timer.h                    |   3 +-
 sound/pci/hda/hda_codec.c                     |   2 +-
 sound/pci/hda/hda_eld.c                       |   2 +-
 sound/pci/hda/hda_sysfs.c                     |   4 +-
 sound/pci/hda/patch_conexant.c                |   1 +
 sound/sh/aica.c                               |   4 +-
 sound/soc/atmel/Kconfig                       |   2 +
 sound/usb/quirks.c                            |   1 +
 sound/usb/usx2y/usX2Yhwdep.c                  |   2 +-
 tools/lib/api/fs/fs.c                         |   1 +
 tools/usb/usbip/src/usbip_network.c           |  40 ++++---
 tools/usb/usbip/src/usbip_network.h           |  12 +--
 130 files changed, 775 insertions(+), 377 deletions(-)
 create mode 100644 drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723b_fw.bin
 create mode 100644 drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_ap_wowlan.bin
 create mode 100644 drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_bt.bin
 create mode 100644 drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_nic.bin
 create mode 100644 drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_wowlan.bin
 create mode 100644 drivers/net/wireless/rockchip_wlan/rtl8812au/regdb/regulatory.db
 create mode 100644 drivers/net/wireless/rockchip_wlan/rtl8812au/regdb/regulatory.db.p7s

diff --git a/Makefile b/Makefile
index 99b4736a26..88ba7f96cd 100644
--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,6 @@
 VERSION = 4
 PATCHLEVEL = 4
-SUBLEVEL = 214
+SUBLEVEL = 215
 EXTRAVERSION =
 NAME = Blurry Fish Butt
 
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 9ebef2effd..e3fc8bf7b6 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -2016,7 +2016,7 @@ config XIP_PHYS_ADDR
 config KEXEC
 	bool "Kexec system call (EXPERIMENTAL)"
 	depends on (!SMP || PM_SLEEP_SMP)
-	depends on !CPU_V7M
+	depends on MMU
 	select KEXEC_CORE
 	help
 	  kexec is a system call that implements the ability to shutdown your
diff --git a/arch/arm/boot/dts/r8a7779.dtsi b/arch/arm/boot/dts/r8a7779.dtsi
index 6afa909865..8636e2321a 100644
--- a/arch/arm/boot/dts/r8a7779.dtsi
+++ b/arch/arm/boot/dts/r8a7779.dtsi
@@ -63,6 +63,14 @@
 		      <0xf0000100 0x100>;
 	};
 
+	timer@f0000200 {
+		compatible = "arm,cortex-a9-global-timer";
+		reg = <0xf0000200 0x100>;
+		interrupts = <GIC_PPI 11
+			(GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_EDGE_RISING)>;
+		clocks = <&cpg_clocks R8A7779_CLK_ZS>;
+	};
+
 	timer@f0000600 {
 		compatible = "arm,cortex-a9-twd-timer";
 		reg = <0xf0000600 0x20>;
diff --git a/arch/microblaze/kernel/cpu/cache.c b/arch/microblaze/kernel/cpu/cache.c
index 0bde47e4fa..dcba53803f 100644
--- a/arch/microblaze/kernel/cpu/cache.c
+++ b/arch/microblaze/kernel/cpu/cache.c
@@ -92,7 +92,8 @@ static inline void __disable_dcache_nomsr(void)
 #define CACHE_LOOP_LIMITS(start, end, cache_line_length, cache_size)	\
 do {									\
 	int align = ~(cache_line_length - 1);				\
-	end = min(start + cache_size, end);				\
+	if (start <  UINT_MAX - cache_size)				\
+		end = min(start + cache_size, end);			\
 	start &= align;							\
 } while (0)
 
diff --git a/arch/mips/loongson64/loongson-3/platform.c b/arch/mips/loongson64/loongson-3/platform.c
index 25a97cc0ee..0db4cc3196 100644
--- a/arch/mips/loongson64/loongson-3/platform.c
+++ b/arch/mips/loongson64/loongson-3/platform.c
@@ -31,6 +31,9 @@ static int __init loongson3_platform_init(void)
 			continue;
 
 		pdev = kzalloc(sizeof(struct platform_device), GFP_KERNEL);
+		if (!pdev)
+			return -ENOMEM;
+
 		pdev->name = loongson_sysconf.sensors[i].name;
 		pdev->id = loongson_sysconf.sensors[i].id;
 		pdev->dev.platform_data = &loongson_sysconf.sensors[i];
diff --git a/arch/s390/include/asm/timex.h b/arch/s390/include/asm/timex.h
index dcb6312a0b..ec94e88122 100644
--- a/arch/s390/include/asm/timex.h
+++ b/arch/s390/include/asm/timex.h
@@ -82,7 +82,7 @@ static inline void get_tod_clock_ext(char *clk)
 
 static inline unsigned long long get_tod_clock(void)
 {
-	unsigned char clk[STORE_CLOCK_EXT_SIZE];
+	char clk[STORE_CLOCK_EXT_SIZE];
 
 	get_tod_clock_ext(clk);
 	return *((unsigned long long *)&clk[1]);
diff --git a/arch/s390/kernel/mcount.S b/arch/s390/kernel/mcount.S
index 6c1c7d399b..78ba14546e 100644
--- a/arch/s390/kernel/mcount.S
+++ b/arch/s390/kernel/mcount.S
@@ -23,6 +23,12 @@ ENTRY(ftrace_stub)
 #define STACK_PTREGS	  (STACK_FRAME_OVERHEAD)
 #define STACK_PTREGS_GPRS (STACK_PTREGS + __PT_GPRS)
 #define STACK_PTREGS_PSW  (STACK_PTREGS + __PT_PSW)
+#ifdef __PACK_STACK
+/* allocate just enough for r14, r15 and backchain */
+#define TRACED_FUNC_FRAME_SIZE	24
+#else
+#define TRACED_FUNC_FRAME_SIZE	STACK_FRAME_OVERHEAD
+#endif
 
 ENTRY(_mcount)
 	BR_EX	%r14
@@ -34,9 +40,16 @@ ENTRY(ftrace_caller)
 #ifndef CC_USING_HOTPATCH
 	aghi	%r0,MCOUNT_RETURN_FIXUP
 #endif
-	aghi	%r15,-STACK_FRAME_SIZE
+	# allocate stack frame for ftrace_caller to contain traced function
+	aghi	%r15,-TRACED_FUNC_FRAME_SIZE
 	stg	%r1,__SF_BACKCHAIN(%r15)
+	stg	%r0,(__SF_GPRS+8*8)(%r15)
+	stg	%r15,(__SF_GPRS+9*8)(%r15)
+	# allocate pt_regs and stack frame for ftrace_trace_function
+	aghi	%r15,-STACK_FRAME_SIZE
 	stg	%r1,(STACK_PTREGS_GPRS+15*8)(%r15)
+	aghi	%r1,-TRACED_FUNC_FRAME_SIZE
+	stg	%r1,__SF_BACKCHAIN(%r15)
 	stg	%r0,(STACK_PTREGS_PSW+8)(%r15)
 	stmg	%r2,%r14,(STACK_PTREGS_GPRS+2*8)(%r15)
 #ifdef CONFIG_HAVE_MARCH_Z196_FEATURES
diff --git a/arch/sh/include/cpu-sh2a/cpu/sh7269.h b/arch/sh/include/cpu-sh2a/cpu/sh7269.h
index 2a0ca8780f..e4caddd443 100644
--- a/arch/sh/include/cpu-sh2a/cpu/sh7269.h
+++ b/arch/sh/include/cpu-sh2a/cpu/sh7269.h
@@ -79,8 +79,15 @@ enum {
 	GPIO_FN_WDTOVF,
 
 	/* CAN */
-	GPIO_FN_CTX1, GPIO_FN_CRX1, GPIO_FN_CTX0, GPIO_FN_CTX0_CTX1,
-	GPIO_FN_CRX0, GPIO_FN_CRX0_CRX1, GPIO_FN_CRX0_CRX1_CRX2,
+	GPIO_FN_CTX2, GPIO_FN_CRX2,
+	GPIO_FN_CTX1, GPIO_FN_CRX1,
+	GPIO_FN_CTX0, GPIO_FN_CRX0,
+	GPIO_FN_CTX0_CTX1, GPIO_FN_CRX0_CRX1,
+	GPIO_FN_CTX0_CTX1_CTX2, GPIO_FN_CRX0_CRX1_CRX2,
+	GPIO_FN_CTX2_PJ21, GPIO_FN_CRX2_PJ20,
+	GPIO_FN_CTX1_PJ23, GPIO_FN_CRX1_PJ22,
+	GPIO_FN_CTX0_CTX1_PJ23, GPIO_FN_CRX0_CRX1_PJ22,
+	GPIO_FN_CTX0_CTX1_CTX2_PJ21, GPIO_FN_CRX0_CRX1_CRX2_PJ20,
 
 	/* DMAC */
 	GPIO_FN_TEND0, GPIO_FN_DACK0, GPIO_FN_DREQ0,
diff --git a/arch/x86/entry/vdso/vdso32-setup.c b/arch/x86/entry/vdso/vdso32-setup.c
index 3f9d1a8389..50c1f77cab 100644
--- a/arch/x86/entry/vdso/vdso32-setup.c
+++ b/arch/x86/entry/vdso/vdso32-setup.c
@@ -10,6 +10,7 @@
 #include <linux/smp.h>
 #include <linux/kernel.h>
 #include <linux/mm_types.h>
+#include <linux/elf.h>
 
 #include <asm/processor.h>
 #include <asm/vdso.h>
diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h
index 94491e4d21..01ec126c59 100644
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@ -301,6 +301,7 @@
 /* Intel-defined CPU features, CPUID level 0x00000007:0 (ecx), word 16 */
 #define X86_FEATURE_PKU		(16*32+ 3) /* Protection Keys for Userspace */
 #define X86_FEATURE_OSPKE	(16*32+ 4) /* OS Protection Keys Enable */
+#define X86_FEATURE_RDPID	(16*32+ 22) /* RDPID instruction */
 
 /* AMD-defined CPU features, CPUID level 0x80000007 (ebx), word 17 */
 #define X86_FEATURE_OVERFLOW_RECOV (17*32+0) /* MCA overflow recovery support */
diff --git a/arch/x86/include/asm/vgtod.h b/arch/x86/include/asm/vgtod.h
index f556c4843a..51e7533bbf 100644
--- a/arch/x86/include/asm/vgtod.h
+++ b/arch/x86/include/asm/vgtod.h
@@ -83,8 +83,13 @@ static inline unsigned int __getcpu(void)
 	 * works on all CPUs.  This is volatile so that it orders
 	 * correctly wrt barrier() and to keep gcc from cleverly
 	 * hoisting it out of the calling function.
+	 *
+	 * If RDPID is available, use it.
 	 */
-	asm volatile ("lsl %1,%0" : "=r" (p) : "r" (__PER_CPU_SEG));
+	alternative_io ("lsl %[p],%[seg]",
+			".byte 0xf3,0x0f,0xc7,0xf8", /* RDPID %eax/rax */
+			X86_FEATURE_RDPID,
+			[p] "=a" (p), [seg] "r" (__PER_CPU_SEG));
 
 	return p;
 }
diff --git a/arch/x86/kernel/cpu/mcheck/mce_amd.c b/arch/x86/kernel/cpu/mcheck/mce_amd.c
index 2116176c17..37f5c26088 100644
--- a/arch/x86/kernel/cpu/mcheck/mce_amd.c
+++ b/arch/x86/kernel/cpu/mcheck/mce_amd.c
@@ -560,9 +560,12 @@ static const struct sysfs_ops threshold_ops = {
 	.store			= store,
 };
 
+static void threshold_block_release(struct kobject *kobj);
+
 static struct kobj_type threshold_ktype = {
 	.sysfs_ops		= &threshold_ops,
 	.default_attrs		= default_attrs,
+	.release		= threshold_block_release,
 };
 
 static int allocate_threshold_blocks(unsigned int cpu, unsigned int bank,
@@ -765,8 +768,12 @@ static int threshold_create_device(unsigned int cpu)
 	return err;
 }
 
-static void deallocate_threshold_block(unsigned int cpu,
-						 unsigned int bank)
+static void threshold_block_release(struct kobject *kobj)
+{
+	kfree(to_block(kobj));
+}
+
+static void deallocate_threshold_block(unsigned int cpu, unsigned int bank)
 {
 	struct threshold_block *pos = NULL;
 	struct threshold_block *tmp = NULL;
@@ -776,13 +783,11 @@ static void deallocate_threshold_block(unsigned int cpu,
 		return;
 
 	list_for_each_entry_safe(pos, tmp, &head->blocks->miscj, miscj) {
-		kobject_put(&pos->kobj);
 		list_del(&pos->miscj);
-		kfree(pos);
+		kobject_put(&pos->kobj);
 	}
 
-	kfree(per_cpu(threshold_banks, cpu)[bank]->blocks);
-	per_cpu(threshold_banks, cpu)[bank]->blocks = NULL;
+	kobject_put(&head->blocks->kobj);
 }
 
 static void __threshold_remove_blocks(struct threshold_bank *b)
diff --git a/arch/x86/kvm/cpuid.c b/arch/x86/kvm/cpuid.c
index f4795f5c57..f876414ca8 100644
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -267,13 +267,18 @@ static int __do_cpuid_ent_emulated(struct kvm_cpuid_entry2 *entry,
 {
 	switch (func) {
 	case 0:
-		entry->eax = 1;		/* only one leaf currently */
+		entry->eax = 7;
 		++*nent;
 		break;
 	case 1:
 		entry->ecx = F(MOVBE);
 		++*nent;
 		break;
+	case 7:
+		entry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;
+		if (index == 0)
+			entry->ecx = F(RDPID);
+		++*nent;
 	default:
 		break;
 	}
diff --git a/arch/x86/kvm/emulate.c b/arch/x86/kvm/emulate.c
index ffbdd201c1..767be5e619 100644
--- a/arch/x86/kvm/emulate.c
+++ b/arch/x86/kvm/emulate.c
@@ -3519,6 +3519,16 @@ static int em_cwd(struct x86_emulate_ctxt *ctxt)
 	return X86EMUL_CONTINUE;
 }
 
+static int em_rdpid(struct x86_emulate_ctxt *ctxt)
+{
+	u64 tsc_aux = 0;
+
+	if (ctxt->ops->get_msr(ctxt, MSR_TSC_AUX, &tsc_aux))
+		return emulate_gp(ctxt, 0);
+	ctxt->dst.val = tsc_aux;
+	return X86EMUL_CONTINUE;
+}
+
 static int em_rdtsc(struct x86_emulate_ctxt *ctxt)
 {
 	u64 tsc = 0;
@@ -4379,10 +4389,20 @@ static const struct opcode group8[] = {
 	F(DstMem | SrcImmByte | Lock | PageTable,	em_btc),
 };
 
+/*
+ * The "memory" destination is actually always a register, since we come
+ * from the register case of group9.
+ */
+static const struct gprefix pfx_0f_c7_7 = {
+	N, N, N, II(DstMem | ModRM | Op3264 | EmulateOnUD, em_rdpid, rdtscp),
+};
+
+
 static const struct group_dual group9 = { {
 	N, I(DstMem64 | Lock | PageTable, em_cmpxchg8b), N, N, N, N, N, N,
 }, {
-	N, N, N, N, N, N, N, N,
+	N, N, N, N, N, N, N,
+	GP(0, &pfx_0f_c7_7),
 } };
 
 static const struct opcode group11[] = {
diff --git a/arch/x86/kvm/lapic.c b/arch/x86/kvm/lapic.c
index ce8c4ae25c..078b2176f2 100644
--- a/arch/x86/kvm/lapic.c
+++ b/arch/x86/kvm/lapic.c
@@ -536,9 +536,11 @@ static inline bool pv_eoi_enabled(struct kvm_vcpu *vcpu)
 static bool pv_eoi_get_pending(struct kvm_vcpu *vcpu)
 {
 	u8 val;
-	if (pv_eoi_get_user(vcpu, &val) < 0)
+	if (pv_eoi_get_user(vcpu, &val) < 0) {
 		apic_debug("Can't read EOI MSR value: 0x%llx\n",
 			   (unsigned long long)vcpu->arch.pv_eoi.msr_val);
+		return false;
+	}
 	return val & 0x1;
 }
 
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 6c2b45f5d5..78daf891ab 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -4275,6 +4275,26 @@ static bool cs_ss_rpl_check(struct kvm_vcpu *vcpu)
 		 (ss.selector & SEGMENT_RPL_MASK));
 }
 
+static bool nested_vmx_check_io_bitmaps(struct kvm_vcpu *vcpu,
+					unsigned int port, int size);
+static bool nested_vmx_exit_handled_io(struct kvm_vcpu *vcpu,
+				       struct vmcs12 *vmcs12)
+{
+	unsigned long exit_qualification;
+	unsigned short port;
+	int size;
+
+	if (!nested_cpu_has(vmcs12, CPU_BASED_USE_IO_BITMAPS))
+		return nested_cpu_has(vmcs12, CPU_BASED_UNCOND_IO_EXITING);
+
+	exit_qualification = vmcs_readl(EXIT_QUALIFICATION);
+
+	port = exit_qualification >> 16;
+	size = (exit_qualification & 7) + 1;
+
+	return nested_vmx_check_io_bitmaps(vcpu, port, size);
+}
+
 /*
  * Check if guest state is valid. Returns true if valid, false if
  * not.
@@ -7624,23 +7644,17 @@ static int (*const kvm_vmx_exit_handlers[])(struct kvm_vcpu *vcpu) = {
 static const int kvm_vmx_max_exit_handlers =
 	ARRAY_SIZE(kvm_vmx_exit_handlers);
 
-static bool nested_vmx_exit_handled_io(struct kvm_vcpu *vcpu,
-				       struct vmcs12 *vmcs12)
+/*
+ * Return true if an IO instruction with the specified port and size should cause
+ * a VM-exit into L1.
+ */
+bool nested_vmx_check_io_bitmaps(struct kvm_vcpu *vcpu, unsigned int port,
+				 int size)
 {
-	unsigned long exit_qualification;
+	struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
 	gpa_t bitmap, last_bitmap;
-	unsigned int port;
-	int size;
 	u8 b;
 
-	if (!nested_cpu_has(vmcs12, CPU_BASED_USE_IO_BITMAPS))
-		return nested_cpu_has(vmcs12, CPU_BASED_UNCOND_IO_EXITING);
-
-	exit_qualification = vmcs_readl(EXIT_QUALIFICATION);
-
-	port = exit_qualification >> 16;
-	size = (exit_qualification & 7) + 1;
-
 	last_bitmap = (gpa_t)-1;
 	b = -1;
 
@@ -10740,11 +10754,71 @@ static void nested_vmx_entry_failure(struct kvm_vcpu *vcpu,
 		to_vmx(vcpu)->nested.sync_shadow_vmcs = true;
 }
 
+static int vmx_check_intercept_io(struct kvm_vcpu *vcpu,
+				  struct x86_instruction_info *info)
+{
+	struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
+	unsigned short port;
+	bool intercept;
+	int size;
+
+	if (info->intercept == x86_intercept_in ||
+	    info->intercept == x86_intercept_ins) {
+		port = info->src_val;
+		size = info->dst_bytes;
+	} else {
+		port = info->dst_val;
+		size = info->src_bytes;
+	}
+
+	/*
+	 * If the 'use IO bitmaps' VM-execution control is 0, IO instruction
+	 * VM-exits depend on the 'unconditional IO exiting' VM-execution
+	 * control.
+	 *
+	 * Otherwise, IO instruction VM-exits are controlled by the IO bitmaps.
+	 */
+	if (!nested_cpu_has(vmcs12, CPU_BASED_USE_IO_BITMAPS))
+		intercept = nested_cpu_has(vmcs12,
+					   CPU_BASED_UNCOND_IO_EXITING);
+	else
+		intercept = nested_vmx_check_io_bitmaps(vcpu, port, size);
+
+	return intercept ? X86EMUL_UNHANDLEABLE : X86EMUL_CONTINUE;
+}
+
 static int vmx_check_intercept(struct kvm_vcpu *vcpu,
 			       struct x86_instruction_info *info,
 			       enum x86_intercept_stage stage)
 {
-	return X86EMUL_CONTINUE;
+	struct vmcs12 *vmcs12 = get_vmcs12(vcpu);
+	struct x86_emulate_ctxt *ctxt = &vcpu->arch.emulate_ctxt;
+
+	switch (info->intercept) {
+	/*
+	 * RDPID causes #UD if disabled through secondary execution controls.
+	 * Because it is marked as EmulateOnUD, we need to intercept it here.
+	 */
+	case x86_intercept_rdtscp:
+		if (!nested_cpu_has2(vmcs12, SECONDARY_EXEC_RDTSCP)) {
+			ctxt->exception.vector = UD_VECTOR;
+			ctxt->exception.error_code_valid = false;
+			return X86EMUL_PROPAGATE_FAULT;
+		}
+		break;
+
+	case x86_intercept_in:
+	case x86_intercept_ins:
+	case x86_intercept_out:
+	case x86_intercept_outs:
+		return vmx_check_intercept_io(vcpu, info);
+
+	/* TODO: check more intercepts... */
+	default:
+		break;
+	}
+
+	return X86EMUL_UNHANDLEABLE;
 }
 
 static void vmx_sched_in(struct kvm_vcpu *vcpu, int cpu)
diff --git a/arch/x86/platform/efi/efi.c b/arch/x86/platform/efi/efi.c
index 4bc352fc08..105872617b 100644
--- a/arch/x86/platform/efi/efi.c
+++ b/arch/x86/platform/efi/efi.c
@@ -465,7 +465,6 @@ void __init efi_init(void)
 	efi_char16_t *c16;
 	char vendor[100] = "unknown";
 	int i = 0;
-	void *tmp;
 
 #ifdef CONFIG_X86_32
 	if (boot_params.efi_info.efi_systab_hi ||
@@ -490,14 +489,16 @@ void __init efi_init(void)
 	/*
 	 * Show what we know for posterity
 	 */
-	c16 = tmp = early_memremap(efi.systab->fw_vendor, 2);
+	c16 = early_memremap_ro(efi.systab->fw_vendor,
+				sizeof(vendor) * sizeof(efi_char16_t));
 	if (c16) {
-		for (i = 0; i < sizeof(vendor) - 1 && *c16; ++i)
-			vendor[i] = *c16++;
+		for (i = 0; i < sizeof(vendor) - 1 && c16[i]; ++i)
+			vendor[i] = c16[i];
 		vendor[i] = '\0';
-	} else
+		early_memunmap(c16, sizeof(vendor) * sizeof(efi_char16_t));
+	} else {
 		pr_err("Could not map the firmware vendor!\n");
-	early_memunmap(tmp, 2);
+	}
 
 	pr_info("EFI v%u.%.02u by %s\n",
 		efi.systab->hdr.revision >> 16,
diff --git a/drivers/acpi/acpica/dsfield.c b/drivers/acpi/acpica/dsfield.c
index 20de148594..d56cbcda37 100644
--- a/drivers/acpi/acpica/dsfield.c
+++ b/drivers/acpi/acpica/dsfield.c
@@ -272,7 +272,7 @@ acpi_ds_create_buffer_field(union acpi_parse_object *op,
  * FUNCTION:    acpi_ds_get_field_names
  *
  * PARAMETERS:  info            - create_field info structure
- *  `           walk_state      - Current method state
+ *              walk_state      - Current method state
  *              arg             - First parser arg for the field name list
  *
  * RETURN:      Status
diff --git a/drivers/acpi/acpica/dswload.c b/drivers/acpi/acpica/dswload.c
index 097188a6b1..35f1d76579 100644
--- a/drivers/acpi/acpica/dswload.c
+++ b/drivers/acpi/acpica/dswload.c
@@ -440,6 +440,27 @@ acpi_status acpi_ds_load1_end_op(struct acpi_walk_state *walk_state)
 	ACPI_DEBUG_PRINT((ACPI_DB_DISPATCH, "Op=%p State=%p\n", op,
 			  walk_state));
 
+	/*
+	 * Disassembler: handle create field operators here.
+	 *
+	 * create_buffer_field is a deferred op that is typically processed in load
+	 * pass 2. However, disassembly of control method contents walk the parse
+	 * tree with ACPI_PARSE_LOAD_PASS1 and AML_CREATE operators are processed
+	 * in a later walk. This is a problem when there is a control method that
+	 * has the same name as the AML_CREATE object. In this case, any use of the
+	 * name segment will be detected as a method call rather than a reference
+	 * to a buffer field.
+	 *
+	 * This earlier creation during disassembly solves this issue by inserting
+	 * the named object in the ACPI namespace so that references to this name
+	 * would be a name string rather than a method call.
+	 */
+	if ((walk_state->parse_flags & ACPI_PARSE_DISASSEMBLE) &&
+	    (walk_state->op_info->flags & AML_CREATE)) {
+		status = acpi_ds_create_buffer_field(op, walk_state);
+		return_ACPI_STATUS(status);
+	}
+
 	/* We are only interested in opcodes that have an associated name */
 
 	if (!(walk_state->op_info->flags & (AML_NAMED | AML_FIELD))) {
diff --git a/drivers/base/dd.c b/drivers/base/dd.c
index 76ce7f0f88..8ad206001a 100644
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@ -349,7 +349,10 @@ static int really_probe(struct device *dev, struct device_driver *drv)
 	atomic_inc(&probe_count);
 	pr_debug("bus: '%s': %s: probing driver %s with device %s\n",
 		 drv->bus->name, __func__, drv->name, dev_name(dev));
-	WARN_ON(!list_empty(&dev->devres_head));
+	if (!list_empty(&dev->devres_head)) {
+		dev_crit(dev, "Resources present before probing\n");
+		return -EBUSY;
+	}
 
 	dev->driver = drv;
 
diff --git a/drivers/block/brd.c b/drivers/block/brd.c
index 1914c63ca8..58c1138ad5 100644
--- a/drivers/block/brd.c
+++ b/drivers/block/brd.c
@@ -581,6 +581,25 @@ static struct kobject *brd_probe(dev_t dev, int *part, void *data)
 	return kobj;
 }
 
+static inline void brd_check_and_reset_par(void)
+{
+	if (unlikely(!max_part))
+		max_part = 1;
+
+	/*
+	 * make sure 'max_part' can be divided exactly by (1U << MINORBITS),
+	 * otherwise, it is possiable to get same dev_t when adding partitions.
+	 */
+	if ((1U << MINORBITS) % max_part != 0)
+		max_part = 1UL << fls(max_part);
+
+	if (max_part > DISK_MAX_PARTS) {
+		pr_info("brd: max_part can't be larger than %d, reset max_part = %d.\n",
+			DISK_MAX_PARTS, DISK_MAX_PARTS);
+		max_part = DISK_MAX_PARTS;
+	}
+}
+
 static int __init brd_init(void)
 {
 	struct brd_device *brd, *next;
@@ -604,8 +623,7 @@ static int __init brd_init(void)
 	if (register_blkdev(RAMDISK_MAJOR, "ramdisk"))
 		return -EIO;
 
-	if (unlikely(!max_part))
-		max_part = 1;
+	brd_check_and_reset_par();
 
 	for (i = 0; i < rd_nr; i++) {
 		brd = brd_alloc(i);
diff --git a/drivers/block/floppy.c b/drivers/block/floppy.c
index 8199564cdf..03d8ff86ad 100644
--- a/drivers/block/floppy.c
+++ b/drivers/block/floppy.c
@@ -848,14 +848,17 @@ static void reset_fdc_info(int mode)
 /* selects the fdc and drive, and enables the fdc's input/dma. */
 static void set_fdc(int drive)
 {
+	unsigned int new_fdc = fdc;
+
 	if (drive >= 0 && drive < N_DRIVE) {
-		fdc = FDC(drive);
+		new_fdc = FDC(drive);
 		current_drive = drive;
 	}
-	if (fdc != 1 && fdc != 0) {
+	if (new_fdc >= N_FDC) {
 		pr_info("bad fdc value\n");
 		return;
 	}
+	fdc = new_fdc;
 	set_dor(fdc, ~0, 8);
 #if N_FDC > 1
 	set_dor(1 - fdc, ~8, 0);
diff --git a/drivers/clk/qcom/clk-rcg2.c b/drivers/clk/qcom/clk-rcg2.c
index 350a01f748..8b549ece9f 100644
--- a/drivers/clk/qcom/clk-rcg2.c
+++ b/drivers/clk/qcom/clk-rcg2.c
@@ -194,6 +194,9 @@ static int _freq_tbl_determine_rate(struct clk_hw *hw,
 
 	clk_flags = clk_hw_get_flags(hw);
 	p = clk_hw_get_parent_by_index(hw, index);
+	if (!p)
+		return -EINVAL;
+
 	if (clk_flags & CLK_SET_RATE_PARENT) {
 		if (f->pre_div) {
 			if (!rate)
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c
index 3e90ddcbb2..d799927d3a 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c
@@ -319,17 +319,9 @@ bool amdgpu_atombios_get_connector_info_from_object_table(struct amdgpu_device *
 		path_size += le16_to_cpu(path->usSize);
 
 		if (device_support & le16_to_cpu(path->usDeviceTag)) {
-			uint8_t con_obj_id, con_obj_num, con_obj_type;
-
-			con_obj_id =
+			uint8_t con_obj_id =
 			    (le16_to_cpu(path->usConnObjectId) & OBJECT_ID_MASK)
 			    >> OBJECT_ID_SHIFT;
-			con_obj_num =
-			    (le16_to_cpu(path->usConnObjectId) & ENUM_ID_MASK)
-			    >> ENUM_ID_SHIFT;
-			con_obj_type =
-			    (le16_to_cpu(path->usConnObjectId) &
-			     OBJECT_TYPE_MASK) >> OBJECT_TYPE_SHIFT;
 
 			/* Skip TV/CV support */
 			if ((le16_to_cpu(path->usDeviceTag) ==
@@ -354,14 +346,7 @@ bool amdgpu_atombios_get_connector_info_from_object_table(struct amdgpu_device *
 			router.ddc_valid = false;
 			router.cd_valid = false;
 			for (j = 0; j < ((le16_to_cpu(path->usSize) - 8) / 2); j++) {
-				uint8_t grph_obj_id, grph_obj_num, grph_obj_type;
-
-				grph_obj_id =
-				    (le16_to_cpu(path->usGraphicObjIds[j]) &
-				     OBJECT_ID_MASK) >> OBJECT_ID_SHIFT;
-				grph_obj_num =
-				    (le16_to_cpu(path->usGraphicObjIds[j]) &
-				     ENUM_ID_MASK) >> ENUM_ID_SHIFT;
+				uint8_t grph_obj_type=
 				grph_obj_type =
 				    (le16_to_cpu(path->usGraphicObjIds[j]) &
 				     OBJECT_TYPE_MASK) >> OBJECT_TYPE_SHIFT;
diff --git a/drivers/gpu/drm/gma500/framebuffer.c b/drivers/gpu/drm/gma500/framebuffer.c
index 2eaf1b31c7..ef60bb1971 100644
--- a/drivers/gpu/drm/gma500/framebuffer.c
+++ b/drivers/gpu/drm/gma500/framebuffer.c
@@ -533,6 +533,7 @@ static int psbfb_probe(struct drm_fb_helper *helper,
 		container_of(helper, struct psb_fbdev, psb_fb_helper);
 	struct drm_device *dev = psb_fbdev->psb_fb_helper.dev;
 	struct drm_psb_private *dev_priv = dev->dev_private;
+	unsigned int fb_size;
 	int bytespp;
 
 	bytespp = sizes->surface_bpp / 8;
@@ -542,8 +543,11 @@ static int psbfb_probe(struct drm_fb_helper *helper,
 	/* If the mode will not fit in 32bit then switch to 16bit to get
 	   a console on full resolution. The X mode setting server will
 	   allocate its own 32bit GEM framebuffer */
-	if (ALIGN(sizes->fb_width * bytespp, 64) * sizes->fb_height >
-	                dev_priv->vram_stolen_size) {
+	fb_size = ALIGN(sizes->surface_width * bytespp, 64) *
+		  sizes->surface_height;
+	fb_size = ALIGN(fb_size, PAGE_SIZE);
+
+	if (fb_size > dev_priv->vram_stolen_size) {
                 sizes->surface_bpp = 16;
                 sizes->surface_depth = 16;
         }
diff --git a/drivers/gpu/drm/nouveau/nouveau_fence.c b/drivers/gpu/drm/nouveau/nouveau_fence.c
index 574c36b492..fccec23731 100644
--- a/drivers/gpu/drm/nouveau/nouveau_fence.c
+++ b/drivers/gpu/drm/nouveau/nouveau_fence.c
@@ -157,7 +157,7 @@ nouveau_fence_wait_uevent_handler(struct nvif_notify *notify)
 
 		fence = list_entry(fctx->pending.next, typeof(*fence), head);
 		chan = rcu_dereference_protected(fence->channel, lockdep_is_held(&fctx->lock));
-		if (nouveau_fence_update(fence->channel, fctx))
+		if (nouveau_fence_update(chan, fctx))
 			ret = NVIF_NOTIFY_DROP;
 	}
 	spin_unlock_irqrestore(&fctx->lock, flags);
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c b/drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c
index 01803c0679..d012df9fb9 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c
@@ -72,6 +72,8 @@ nv50_disp_chan_mthd(struct nv50_disp_chan *chan, int debug)
 
 	if (debug > subdev->debug)
 		return;
+	if (!mthd)
+		return;
 
 	for (i = 0; (list = mthd->data[i].mthd) != NULL; i++) {
 		u32 base = chan->head * mthd->addr;
diff --git a/drivers/gpu/drm/radeon/radeon_display.c b/drivers/gpu/drm/radeon/radeon_display.c
index 446d990623..4572bfba01 100644
--- a/drivers/gpu/drm/radeon/radeon_display.c
+++ b/drivers/gpu/drm/radeon/radeon_display.c
@@ -110,6 +110,8 @@ static void dce5_crtc_load_lut(struct drm_crtc *crtc)
 
 	DRM_DEBUG_KMS("%d\n", radeon_crtc->crtc_id);
 
+	msleep(10);
+
 	WREG32(NI_INPUT_CSC_CONTROL + radeon_crtc->crtc_offset,
 	       (NI_INPUT_CSC_GRPH_MODE(NI_INPUT_CSC_BYPASS) |
 		NI_INPUT_CSC_OVL_MODE(NI_INPUT_CSC_BYPASS)));
diff --git a/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf_res.c b/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf_res.c
index 1f013d45c9..0c7c300559 100644
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf_res.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_cmdbuf_res.c
@@ -210,8 +210,10 @@ int vmw_cmdbuf_res_add(struct vmw_cmdbuf_res_manager *man,
 
 	cres->hash.key = user_key | (res_type << 24);
 	ret = drm_ht_insert_item(&man->resources, &cres->hash);
-	if (unlikely(ret != 0))
+	if (unlikely(ret != 0)) {
+		kfree(cres);
 		goto out_invalid_key;
+	}
 
 	cres->state = VMW_CMDBUF_RES_ADD;
 	cres->res = vmw_resource_reference(res);
diff --git a/drivers/hwmon/pmbus/ltc2978.c b/drivers/hwmon/pmbus/ltc2978.c
index 58b789c28b..94eea2ac62 100644
--- a/drivers/hwmon/pmbus/ltc2978.c
+++ b/drivers/hwmon/pmbus/ltc2978.c
@@ -89,8 +89,8 @@ enum chips { ltc2974, ltc2975, ltc2977, ltc2978, ltc2980, ltc3880, ltc3882,
 
 #define LTC_POLL_TIMEOUT		100	/* in milli-seconds */
 
-#define LTC_NOT_BUSY			BIT(5)
-#define LTC_NOT_PENDING			BIT(4)
+#define LTC_NOT_BUSY			BIT(6)
+#define LTC_NOT_PENDING			BIT(5)
 
 /*
  * LTC2978 clears peak data whenever the CLEAR_FAULTS command is executed, which
diff --git a/drivers/ide/cmd64x.c b/drivers/ide/cmd64x.c
index b127ed60c7..9dde8390da 100644
--- a/drivers/ide/cmd64x.c
+++ b/drivers/ide/cmd64x.c
@@ -65,6 +65,9 @@ static void cmd64x_program_timings(ide_drive_t *drive, u8 mode)
 	struct ide_timing t;
 	u8 arttim = 0;
 
+	if (drive->dn >= ARRAY_SIZE(drwtim_regs))
+		return;
+
 	ide_timing_compute(drive, mode, &t, T, 0);
 
 	/*
diff --git a/drivers/ide/serverworks.c b/drivers/ide/serverworks.c
index a97affca18..0f57d45484 100644
--- a/drivers/ide/serverworks.c
+++ b/drivers/ide/serverworks.c
@@ -114,6 +114,9 @@ static void svwks_set_pio_mode(ide_hwif_t *hwif, ide_drive_t *drive)
 	struct pci_dev *dev = to_pci_dev(hwif->dev);
 	const u8 pio = drive->pio_mode - XFER_PIO_0;
 
+	if (drive->dn >= ARRAY_SIZE(drive_pci))
+		return;
+
 	pci_write_config_byte(dev, drive_pci[drive->dn], pio_modes[pio]);
 
 	if (svwks_csb_check(dev)) {
@@ -140,6 +143,9 @@ static void svwks_set_dma_mode(ide_hwif_t *hwif, ide_drive_t *drive)
 
 	u8 ultra_enable	 = 0, ultra_timing = 0, dma_timing = 0;
 
+	if (drive->dn >= ARRAY_SIZE(drive_pci2))
+		return;
+
 	pci_read_config_byte(dev, (0x56|hwif->channel), &ultra_timing);
 	pci_read_config_byte(dev, 0x54, &ultra_enable);
 
diff --git a/drivers/infiniband/ulp/isert/ib_isert.c b/drivers/infiniband/ulp/isert/ib_isert.c
index 32ef17e1ae..d8adb58636 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.c
+++ b/drivers/infiniband/ulp/isert/ib_isert.c
@@ -3295,6 +3295,17 @@ isert_wait4flush(struct isert_conn *isert_conn)
 	wait_for_completion(&isert_conn->wait_comp_err);
 }
 
+static void
+isert_wait4cmds(struct iscsi_conn *conn)
+{
+	isert_info("iscsi_conn %p\n", conn);
+
+	if (conn->sess) {
+		target_sess_cmd_list_set_waiting(conn->sess->se_sess);
+		target_wait_for_sess_cmds(conn->sess->se_sess);
+	}
+}
+
 /**
  * isert_put_unsol_pending_cmds() - Drop commands waiting for
  *     unsolicitate dataout
@@ -3350,6 +3361,7 @@ static void isert_wait_conn(struct iscsi_conn *conn)
 
 	isert_wait4flush(isert_conn);
 	isert_put_unsol_pending_cmds(conn);
+	isert_wait4cmds(conn);
 	isert_wait4logout(isert_conn);
 
 	queue_work(isert_release_wq, &isert_conn->release_work);
diff --git a/drivers/iommu/arm-smmu-v3.c b/drivers/iommu/arm-smmu-v3.c
index eb9937225d..6c10f307a1 100644
--- a/drivers/iommu/arm-smmu-v3.c
+++ b/drivers/iommu/arm-smmu-v3.c
@@ -1090,7 +1090,8 @@ static void arm_smmu_write_strtab_ent(struct arm_smmu_device *smmu, u32 sid,
 	}
 
 	arm_smmu_sync_ste_for_sid(smmu, sid);
-	dst[0] = cpu_to_le64(val);
+	/* See comment in arm_smmu_write_ctx_desc() */
+	WRITE_ONCE(dst[0], cpu_to_le64(val));
 	arm_smmu_sync_ste_for_sid(smmu, sid);
 
 	/* It's likely that we'll want to use the new STE soon */
diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index 0c9cbf48b4..8951a48a87 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -353,7 +353,7 @@ static struct its_collection *its_build_invall_cmd(struct its_cmd_block *cmd,
 						   struct its_cmd_desc *desc)
 {
 	its_encode_cmd(cmd, GITS_CMD_INVALL);
-	its_encode_collection(cmd, desc->its_mapc_cmd.col->col_id);
+	its_encode_collection(cmd, desc->its_invall_cmd.col->col_id);
 
 	its_fixup_cmd(cmd);
 
diff --git a/drivers/md/bcache/bset.h b/drivers/md/bcache/bset.h
index b935839ab7..f483041eed 100644
--- a/drivers/md/bcache/bset.h
+++ b/drivers/md/bcache/bset.h
@@ -380,7 +380,8 @@ void bch_btree_keys_stats(struct btree_keys *, struct bset_stats *);
 
 /* Bkey utility code */
 
-#define bset_bkey_last(i)	bkey_idx((struct bkey *) (i)->d, (i)->keys)
+#define bset_bkey_last(i)	bkey_idx((struct bkey *) (i)->d, \
+					 (unsigned int)(i)->keys)
 
 static inline struct bkey *bset_bkey_idx(struct bset *i, unsigned idx)
 {
diff --git a/drivers/media/i2c/mt9v032.c b/drivers/media/i2c/mt9v032.c
index 5d070cdb51..5a2ed97b32 100644
--- a/drivers/media/i2c/mt9v032.c
+++ b/drivers/media/i2c/mt9v032.c
@@ -455,10 +455,12 @@ static int mt9v032_enum_mbus_code(struct v4l2_subdev *subdev,
 				  struct v4l2_subdev_pad_config *cfg,
 				  struct v4l2_subdev_mbus_code_enum *code)
 {
+	struct mt9v032 *mt9v032 = to_mt9v032(subdev);
+
 	if (code->index > 0)
 		return -EINVAL;
 
-	code->code = MEDIA_BUS_FMT_SGRBG10_1X10;
+	code->code = mt9v032->format.code;
 	return 0;
 }
 
@@ -466,7 +468,11 @@ static int mt9v032_enum_frame_size(struct v4l2_subdev *subdev,
 				   struct v4l2_subdev_pad_config *cfg,
 				   struct v4l2_subdev_frame_size_enum *fse)
 {
-	if (fse->index >= 3 || fse->code != MEDIA_BUS_FMT_SGRBG10_1X10)
+	struct mt9v032 *mt9v032 = to_mt9v032(subdev);
+
+	if (fse->index >= 3)
+		return -EINVAL;
+	if (mt9v032->format.code != fse->code)
 		return -EINVAL;
 
 	fse->min_width = MT9V032_WINDOW_WIDTH_DEF / (1 << fse->index);
diff --git a/drivers/media/platform/sti/bdisp/bdisp-hw.c b/drivers/media/platform/sti/bdisp/bdisp-hw.c
index 052c932ac9..0792db43ce 100644
--- a/drivers/media/platform/sti/bdisp/bdisp-hw.c
+++ b/drivers/media/platform/sti/bdisp/bdisp-hw.c
@@ -14,8 +14,8 @@
 #define MAX_SRC_WIDTH           2048
 
 /* Reset & boot poll config */
-#define POLL_RST_MAX            50
-#define POLL_RST_DELAY_MS       20
+#define POLL_RST_MAX            500
+#define POLL_RST_DELAY_MS       2
 
 enum bdisp_target_plan {
 	BDISP_RGB,
@@ -77,7 +77,7 @@ int bdisp_hw_reset(struct bdisp_dev *bdisp)
 	for (i = 0; i < POLL_RST_MAX; i++) {
 		if (readl(bdisp->regs + BLT_STA1) & BLT_STA1_IDLE)
 			break;
-		msleep(POLL_RST_DELAY_MS);
+		udelay(POLL_RST_DELAY_MS * 1000);
 	}
 	if (i == POLL_RST_MAX)
 		dev_err(bdisp->dev, "Reset timeout\n");
diff --git a/drivers/net/ethernet/cisco/enic/enic_main.c b/drivers/net/ethernet/cisco/enic/enic_main.c
index 3c20d0dc92..9b97933338 100644
--- a/drivers/net/ethernet/cisco/enic/enic_main.c
+++ b/drivers/net/ethernet/cisco/enic/enic_main.c
@@ -1807,10 +1807,10 @@ static int enic_stop(struct net_device *netdev)
 	}
 
 	netif_carrier_off(netdev);
-	netif_tx_disable(netdev);
 	if (vnic_dev_get_intr_mode(enic->vdev) == VNIC_DEV_INTR_MODE_MSIX)
 		for (i = 0; i < enic->wq_count; i++)
 			napi_disable(&enic->napi[enic_cq_wq(enic, i)]);
+	netif_tx_disable(netdev);
 
 	if (!enic_is_dynamic(enic) && !enic_is_sriov_vf(enic))
 		enic_dev_del_station_addr(enic);
diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index 2d61369f58..37cc1f838d 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -2679,13 +2679,17 @@ static void gfar_clean_tx_ring(struct gfar_priv_tx_q *tx_queue)
 	skb_dirtytx = tx_queue->skb_dirtytx;
 
 	while ((skb = tx_queue->tx_skbuff[skb_dirtytx])) {
+		bool do_tstamp;
+
+		do_tstamp = (skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP) &&
+			    priv->hwts_tx_en;
 
 		frags = skb_shinfo(skb)->nr_frags;
 
 		/* When time stamping, one additional TxBD must be freed.
 		 * Also, we need to dma_unmap_single() the TxPAL.
 		 */
-		if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS))
+		if (unlikely(do_tstamp))
 			nr_txbds = frags + 2;
 		else
 			nr_txbds = frags + 1;
@@ -2699,7 +2703,7 @@ static void gfar_clean_tx_ring(struct gfar_priv_tx_q *tx_queue)
 		    (lstatus & BD_LENGTH_MASK))
 			break;
 
-		if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS)) {
+		if (unlikely(do_tstamp)) {
 			next = next_txbd(bdp, base, tx_ring_size);
 			buflen = be16_to_cpu(next->length) +
 				 GMAC_FCB_LEN + GMAC_TXPAL_LEN;
@@ -2709,7 +2713,7 @@ static void gfar_clean_tx_ring(struct gfar_priv_tx_q *tx_queue)
 		dma_unmap_single(priv->dev, be32_to_cpu(bdp->bufPtr),
 				 buflen, DMA_TO_DEVICE);
 
-		if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_IN_PROGRESS)) {
+		if (unlikely(do_tstamp)) {
 			struct skb_shared_hwtstamps shhwtstamps;
 			u64 *ns = (u64 *)(((uintptr_t)skb->data + 0x10) &
 					  ~0x7UL);
diff --git a/drivers/net/wan/ixp4xx_hss.c b/drivers/net/wan/ixp4xx_hss.c
index e7bbdb7af5..97968e6a6a 100644
--- a/drivers/net/wan/ixp4xx_hss.c
+++ b/drivers/net/wan/ixp4xx_hss.c
@@ -261,7 +261,7 @@ struct port {
 	struct hss_plat_info *plat;
 	buffer_t *rx_buff_tab[RX_DESCS], *tx_buff_tab[TX_DESCS];
 	struct desc *desc_tab;	/* coherent */
-	u32 desc_tab_phys;
+	dma_addr_t desc_tab_phys;
 	unsigned int id;
 	unsigned int clock_type, clock_rate, loopback;
 	unsigned int initialized, carrier;
@@ -861,7 +861,7 @@ static int hss_hdlc_xmit(struct sk_buff *skb, struct net_device *dev)
 		dev->stats.tx_dropped++;
 		return NETDEV_TX_OK;
 	}
-	memcpy_swab32(mem, (u32 *)((int)skb->data & ~3), bytes / 4);
+	memcpy_swab32(mem, (u32 *)((uintptr_t)skb->data & ~3), bytes / 4);
 	dev_kfree_skb(skb);
 #endif
 
diff --git a/drivers/net/wireless/b43legacy/main.c b/drivers/net/wireless/b43legacy/main.c
index afc1fb3e38..bd35a70238 100644
--- a/drivers/net/wireless/b43legacy/main.c
+++ b/drivers/net/wireless/b43legacy/main.c
@@ -1304,8 +1304,9 @@ static void handle_irq_ucode_debug(struct b43legacy_wldev *dev)
 }
 
 /* Interrupt handler bottom-half */
-static void b43legacy_interrupt_tasklet(struct b43legacy_wldev *dev)
+static void b43legacy_interrupt_tasklet(unsigned long data)
 {
+	struct b43legacy_wldev *dev = (struct b43legacy_wldev *)data;
 	u32 reason;
 	u32 dma_reason[ARRAY_SIZE(dev->dma_reason)];
 	u32 merged_dma_reason = 0;
@@ -3775,7 +3776,7 @@ static int b43legacy_one_core_attach(struct ssb_device *dev,
 	b43legacy_set_status(wldev, B43legacy_STAT_UNINIT);
 	wldev->bad_frames_preempt = modparam_bad_frames_preempt;
 	tasklet_init(&wldev->isr_tasklet,
-		     (void (*)(unsigned long))b43legacy_interrupt_tasklet,
+		     b43legacy_interrupt_tasklet,
 		     (unsigned long)wldev);
 	if (modparam_pio)
 		wldev->__using_pio = true;
diff --git a/drivers/net/wireless/brcm80211/brcmfmac/sdio.c b/drivers/net/wireless/brcm80211/brcmfmac/sdio.c
index b082b8859b..b4d5122d72 100644
--- a/drivers/net/wireless/brcm80211/brcmfmac/sdio.c
+++ b/drivers/net/wireless/brcm80211/brcmfmac/sdio.c
@@ -2027,6 +2027,7 @@ static uint brcmf_sdio_readframes(struct brcmf_sdio *bus, uint maxframes)
 					       BRCMF_SDIO_FT_NORMAL)) {
 				rd->len = 0;
 				brcmu_pkt_buf_free_skb(pkt);
+				continue;
 			}
 			bus->sdcnt.rx_readahead_cnt++;
 			if (rd->len != roundup(rd_new.len, 16)) {
diff --git a/drivers/net/wireless/hostap/hostap_ap.c b/drivers/net/wireless/hostap/hostap_ap.c
index c995ace153..30171d4c47 100644
--- a/drivers/net/wireless/hostap/hostap_ap.c
+++ b/drivers/net/wireless/hostap/hostap_ap.c
@@ -2570,7 +2570,7 @@ static int prism2_hostapd_add_sta(struct ap_data *ap,
 		sta->supported_rates[0] = 2;
 	if (sta->tx_supp_rates & WLAN_RATE_2M)
 		sta->supported_rates[1] = 4;
- 	if (sta->tx_supp_rates & WLAN_RATE_5M5)
+	if (sta->tx_supp_rates & WLAN_RATE_5M5)
 		sta->supported_rates[2] = 11;
 	if (sta->tx_supp_rates & WLAN_RATE_11M)
 		sta->supported_rates[3] = 22;
diff --git a/drivers/net/wireless/ipw2x00/ipw2100.c b/drivers/net/wireless/ipw2x00/ipw2100.c
index 36818c7f30..11cfc5822e 100644
--- a/drivers/net/wireless/ipw2x00/ipw2100.c
+++ b/drivers/net/wireless/ipw2x00/ipw2100.c
@@ -3213,8 +3213,9 @@ static void ipw2100_tx_send_data(struct ipw2100_priv *priv)
 	}
 }
 
-static void ipw2100_irq_tasklet(struct ipw2100_priv *priv)
+static void ipw2100_irq_tasklet(unsigned long data)
 {
+	struct ipw2100_priv *priv = (struct ipw2100_priv *)data;
 	struct net_device *dev = priv->net_dev;
 	unsigned long flags;
 	u32 inta, tmp;
@@ -6022,7 +6023,7 @@ static void ipw2100_rf_kill(struct work_struct *work)
 	spin_unlock_irqrestore(&priv->low_lock, flags);
 }
 
-static void ipw2100_irq_tasklet(struct ipw2100_priv *priv);
+static void ipw2100_irq_tasklet(unsigned long data);
 
 static const struct net_device_ops ipw2100_netdev_ops = {
 	.ndo_open		= ipw2100_open,
@@ -6151,7 +6152,7 @@ static struct net_device *ipw2100_alloc_device(struct pci_dev *pci_dev,
 	INIT_DELAYED_WORK(&priv->rf_kill, ipw2100_rf_kill);
 	INIT_DELAYED_WORK(&priv->scan_event, ipw2100_scan_event);
 
-	tasklet_init(&priv->irq_tasklet, (void (*)(unsigned long))
+	tasklet_init(&priv->irq_tasklet,
 		     ipw2100_irq_tasklet, (unsigned long)priv);
 
 	/* NOTE:  We do not start the deferred work for status checks yet */
diff --git a/drivers/net/wireless/ipw2x00/ipw2200.c b/drivers/net/wireless/ipw2x00/ipw2200.c
index ed0adaf1ee..1e08f94dc4 100644
--- a/drivers/net/wireless/ipw2x00/ipw2200.c
+++ b/drivers/net/wireless/ipw2x00/ipw2200.c
@@ -1968,8 +1968,9 @@ static void notify_wx_assoc_event(struct ipw_priv *priv)
 	wireless_send_event(priv->net_dev, SIOCGIWAP, &wrqu, NULL);
 }
 
-static void ipw_irq_tasklet(struct ipw_priv *priv)
+static void ipw_irq_tasklet(unsigned long data)
 {
+	struct ipw_priv *priv = (struct ipw_priv *)data;
 	u32 inta, inta_mask, handled = 0;
 	unsigned long flags;
 	int rc = 0;
@@ -10705,7 +10706,7 @@ static int ipw_setup_deferred_work(struct ipw_priv *priv)
 	INIT_WORK(&priv->qos_activate, ipw_bg_qos_activate);
 #endif				/* CONFIG_IPW2200_QOS */
 
-	tasklet_init(&priv->irq_tasklet, (void (*)(unsigned long))
+	tasklet_init(&priv->irq_tasklet,
 		     ipw_irq_tasklet, (unsigned long)priv);
 
 	return ret;
diff --git a/drivers/net/wireless/iwlegacy/3945-mac.c b/drivers/net/wireless/iwlegacy/3945-mac.c
index af1b3e6839..775f5e7791 100644
--- a/drivers/net/wireless/iwlegacy/3945-mac.c
+++ b/drivers/net/wireless/iwlegacy/3945-mac.c
@@ -1399,8 +1399,9 @@ il3945_dump_nic_error_log(struct il_priv *il)
 }
 
 static void
-il3945_irq_tasklet(struct il_priv *il)
+il3945_irq_tasklet(unsigned long data)
 {
+	struct il_priv *il = (struct il_priv *)data;
 	u32 inta, handled = 0;
 	u32 inta_fh;
 	unsigned long flags;
@@ -3432,7 +3433,7 @@ il3945_setup_deferred_work(struct il_priv *il)
 	setup_timer(&il->watchdog, il_bg_watchdog, (unsigned long)il);
 
 	tasklet_init(&il->irq_tasklet,
-		     (void (*)(unsigned long))il3945_irq_tasklet,
+		     il3945_irq_tasklet,
 		     (unsigned long)il);
 }
 
diff --git a/drivers/net/wireless/iwlegacy/4965-mac.c b/drivers/net/wireless/iwlegacy/4965-mac.c
index 04b0349a6a..b1925bdb11 100644
--- a/drivers/net/wireless/iwlegacy/4965-mac.c
+++ b/drivers/net/wireless/iwlegacy/4965-mac.c
@@ -4361,8 +4361,9 @@ il4965_synchronize_irq(struct il_priv *il)
 }
 
 static void
-il4965_irq_tasklet(struct il_priv *il)
+il4965_irq_tasklet(unsigned long data)
 {
+	struct il_priv *il = (struct il_priv *)data;
 	u32 inta, handled = 0;
 	u32 inta_fh;
 	unsigned long flags;
@@ -6257,7 +6258,7 @@ il4965_setup_deferred_work(struct il_priv *il)
 	setup_timer(&il->watchdog, il_bg_watchdog, (unsigned long)il);
 
 	tasklet_init(&il->irq_tasklet,
-		     (void (*)(unsigned long))il4965_irq_tasklet,
+		     il4965_irq_tasklet,
 		     (unsigned long)il);
 }
 
diff --git a/drivers/net/wireless/iwlegacy/common.c b/drivers/net/wireless/iwlegacy/common.c
index 8871145825..544ab3750e 100644
--- a/drivers/net/wireless/iwlegacy/common.c
+++ b/drivers/net/wireless/iwlegacy/common.c
@@ -717,7 +717,7 @@ il_eeprom_init(struct il_priv *il)
 	u32 gp = _il_rd(il, CSR_EEPROM_GP);
 	int sz;
 	int ret;
-	u16 addr;
+	int addr;
 
 	/* allocate eeprom */
 	sz = il->cfg->eeprom_size;
diff --git a/drivers/net/wireless/orinoco/orinoco_usb.c b/drivers/net/wireless/orinoco/orinoco_usb.c
index e434f7ca8f..3c5baccd67 100644
--- a/drivers/net/wireless/orinoco/orinoco_usb.c
+++ b/drivers/net/wireless/orinoco/orinoco_usb.c
@@ -1351,7 +1351,8 @@ static int ezusb_init(struct hermes *hw)
 	int retval;
 
 	BUG_ON(in_interrupt());
-	BUG_ON(!upriv);
+	if (!upriv)
+		return -EINVAL;
 
 	upriv->reply_count = 0;
 	/* Write the MAGIC number on the simulated registers to keep
diff --git a/drivers/net/wireless/realtek/rtlwifi/pci.c b/drivers/net/wireless/realtek/rtlwifi/pci.c
index b51815eccd..17a07d6b96 100644
--- a/drivers/net/wireless/realtek/rtlwifi/pci.c
+++ b/drivers/net/wireless/realtek/rtlwifi/pci.c
@@ -1096,13 +1096,15 @@ static irqreturn_t _rtl_pci_interrupt(int irq, void *dev_id)
 	return ret;
 }
 
-static void _rtl_pci_irq_tasklet(struct ieee80211_hw *hw)
+static void _rtl_pci_irq_tasklet(unsigned long data)
 {
+	struct ieee80211_hw *hw = (struct ieee80211_hw *)data;
 	_rtl_pci_tx_chk_waitq(hw);
 }
 
-static void _rtl_pci_prepare_bcn_tasklet(struct ieee80211_hw *hw)
+static void _rtl_pci_prepare_bcn_tasklet(unsigned long data)
 {
+	struct ieee80211_hw *hw = (struct ieee80211_hw *)data;
 	struct rtl_priv *rtlpriv = rtl_priv(hw);
 	struct rtl_pci *rtlpci = rtl_pcidev(rtl_pcipriv(hw));
 	struct rtl_mac *mac = rtl_mac(rtl_priv(hw));
@@ -1223,10 +1225,10 @@ static void _rtl_pci_init_struct(struct ieee80211_hw *hw,
 
 	/*task */
 	tasklet_init(&rtlpriv->works.irq_tasklet,
-		     (void (*)(unsigned long))_rtl_pci_irq_tasklet,
+		     _rtl_pci_irq_tasklet,
 		     (unsigned long)hw);
 	tasklet_init(&rtlpriv->works.irq_prepare_bcn_tasklet,
-		     (void (*)(unsigned long))_rtl_pci_prepare_bcn_tasklet,
+		     _rtl_pci_prepare_bcn_tasklet,
 		     (unsigned long)hw);
 	INIT_WORK(&rtlpriv->works.lps_change_work,
 		  rtl_lps_change_work_callback);
diff --git a/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723b_fw.bin b/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723b_fw.bin
new file mode 100644
index 0000000000000000000000000000000000000000..49b2a26f83d1724d5fb6d6d516522821bcb6fbbd
GIT binary patch
literal 45048
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%0A^pxWN47&5*gw1s2ijd&gh_%X*%^
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
GrT+pek&VCr

literal 0
HcmV?d00001

diff --git a/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_ap_wowlan.bin b/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_ap_wowlan.bin
new file mode 100644
index 0000000000000000000000000000000000000000..033599bda3758668419d0b96e44c8beffdedf98d
GIT binary patch
literal 15466
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

literal 0
HcmV?d00001

diff --git a/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_bt.bin b/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_bt.bin
new file mode 100644
index 0000000000000000000000000000000000000000..f29df42f93347813a18df81767acfd3adcbc1f72
GIT binary patch
literal 9120
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

literal 0
HcmV?d00001

diff --git a/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_nic.bin b/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_nic.bin
new file mode 100644
index 0000000000000000000000000000000000000000..ea7a48a0c86815bc115c298f461918114489a2fd
GIT binary patch
literal 27324
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
F{{c4@+vorQ

literal 0
HcmV?d00001

diff --git a/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_wowlan.bin b/drivers/net/wireless/rockchip_wlan/rtl8723bu/rtl8723bu_wowlan.bin
new file mode 100644
index 0000000000000000000000000000000000000000..98657d242b0936d47aa4ea36293da36da239c7b7
GIT binary patch
literal 24698
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
L?d*KJ!RY;;)Ixyq

literal 0
HcmV?d00001

diff --git a/drivers/net/wireless/rockchip_wlan/rtl8812au/regdb/regulatory.db b/drivers/net/wireless/rockchip_wlan/rtl8812au/regdb/regulatory.db
new file mode 100644
index 0000000000000000000000000000000000000000..e60c3f9f446b6d8f3eb016f03b454e6f51bd7877
GIT binary patch
literal 3580
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
OqxJ8`ceyR!%l`qkPfqCo

literal 0
HcmV?d00001

diff --git a/drivers/net/wireless/rockchip_wlan/rtl8812au/regdb/regulatory.db.p7s b/drivers/net/wireless/rockchip_wlan/rtl8812au/regdb/regulatory.db.p7s
new file mode 100644
index 0000000000000000000000000000000000000000..7cac2f22834b2ece7f12d7202369aa231e418499
GIT binary patch
literal 1182
zcmXqLVwuIpsnzDu_MMlJooPW6OSeH2OFI)IqanWmFB@k<n+IbmGYb<VD}w<yLLuXV
zCZ-hzO-xG+nizYSI2kte-gjU3^W1Wf7N}v2+(0eDhJptCY|No7%sd>$Y57IP8L6oT
z3gWzm=7t6aW`>p~2F9jQ68uJnhUNyAhDJ~U?An?bm5_}Gx`?@nk)HwR0xqT|Mn;CM
z4v*((v{*8Kvb>(A<7gqerfz9-p=#ZPnvA>o_BXFbTFkG>3OdBBrCXQwMQ*cDfkO0^
z=|;AN-PY0^;v(6JN5Z?OiOKv`xysG?GefZD_o+ahi>{Kl1YEjq{wrJgH$hi|TVv`b
z-B%qmc3cco{17bvktzSB+w95l8WZ@}nElF7E({O*cINW^TCJPX#jdY+skgqbs$Y7#
z;kbd>rQmmO*2q0K{AjjlPV%wT=z7)CjD@c**D=J*io2m8VN}kpDU>E>R{VTAi=+9*
zjYZmD7HTTgOsnM9zHsB-i5&aMzmLAF2oe;PuKM;UW9IYUZelHuk1u@o;F8<bhezTU
zq<y({<o{GzCT2zkM&u9zMgTB`7#Z4`Z+&Vyba#D?i+<bXc%R80JO8nZ?^gV-s_eH)
ziAQW_@w&NgHKjKXdxpF3H{L$|%~yxg18zzm7R1h}6khm$$722JJ~sOk+n!`;d@_kq
zwl_NPY%Twq^Pwf~#g`ddw{t6nsnpKrT*=oq&pdigF4N7P69HL|B0r0<z1rloHR9i{
zi;dw@?>AX=M0{IyM6Wwa{mIf7OHQT7tSL%AoG*M>*R=9_*YmGe6b-ztep`IAGVBw-
z!1vk<fs^&!f7E(&wS)?B)%sb>YwQ2f*qmwdu%Ti1qxCzl8GMutX;+>(KaknSwU#Nh
zc=g}&Q_k>OCH%D!(HApbsVILsU}Hb?y9H@0#VSP%n;5qNQ^_V^qBc;#nzqnVFjAsl
zkZB+RPtu&shRAuqKn5YhYRC^x)ka3ZByD73Vi;whkC0_CRAN!c_G6g;(R6porse-b
zJRWV<jeS-4G3EE#<h<W2OlL7~=RuA-VB%(JVq{o)TyIv9VvWG<WolFY8o0d7ZT!4J
zJZE0??5g)qudTG5efiHH)BegG<z)&FoffJUZP2z{AQP?Ko)+M0U+8@9=80L_FHa@i
ziO{(fa`pGLD>e~4&&;MqobEQztP~HjOPGE=JiqI+jQ5(I7rOlWtWA9_W=z;{`tgg}
zh_q)8>SaF@7~XGlcZ^$^{aG%({@?v-N0~D!SsyYiSMOl0T)L2X>M_d+tJeKHx$3a<
zHu*Cvq-@u5&v<rmL(UhzxoHvtC))$OZ(Ne9yij?>Ez4E)ufO<5hv+vKS!AmJ6@PzT
tv*&N>I`#P0H#1K6|5>@+#n=1F<>j0BH8ox1gH8oLs?=CAb<wZC{{XE>;Qasq

literal 0
HcmV?d00001

diff --git a/drivers/nfc/port100.c b/drivers/nfc/port100.c
index 87d5099967..3ffbed72ad 100644
--- a/drivers/nfc/port100.c
+++ b/drivers/nfc/port100.c
@@ -545,7 +545,7 @@ static void port100_tx_update_payload_len(void *_frame, int len)
 {
 	struct port100_frame *frame = _frame;
 
-	frame->datalen = cpu_to_le16(le16_to_cpu(frame->datalen) + len);
+	le16_add_cpu(&frame->datalen, len);
 }
 
 static bool port100_rx_frame_is_valid(void *_frame)
diff --git a/drivers/pci/setup-bus.c b/drivers/pci/setup-bus.c
index 1723ac1b30..fe2865a0da 100644
--- a/drivers/pci/setup-bus.c
+++ b/drivers/pci/setup-bus.c
@@ -1760,12 +1760,18 @@ void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus)
 	/* restore size and flags */
 	list_for_each_entry(fail_res, &fail_head, list) {
 		struct resource *res = fail_res->res;
+		int idx;
 
 		res->start = fail_res->start;
 		res->end = fail_res->end;
 		res->flags = fail_res->flags;
-		if (fail_res->dev->subordinate)
-			res->flags = 0;
+
+		if (pci_is_bridge(fail_res->dev)) {
+			idx = res - &fail_res->dev->resource[0];
+			if (idx >= PCI_BRIDGE_RESOURCES &&
+			    idx <= PCI_BRIDGE_RESOURCE_END)
+				res->flags = 0;
+		}
 	}
 	free_list(&fail_head);
 
@@ -1826,12 +1832,18 @@ void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge)
 	/* restore size and flags */
 	list_for_each_entry(fail_res, &fail_head, list) {
 		struct resource *res = fail_res->res;
+		int idx;
 
 		res->start = fail_res->start;
 		res->end = fail_res->end;
 		res->flags = fail_res->flags;
-		if (fail_res->dev->subordinate)
-			res->flags = 0;
+
+		if (pci_is_bridge(fail_res->dev)) {
+			idx = res - &fail_res->dev->resource[0];
+			if (idx >= PCI_BRIDGE_RESOURCES &&
+			    idx <= PCI_BRIDGE_RESOURCE_END)
+				res->flags = 0;
+		}
 	}
 	free_list(&fail_head);
 
diff --git a/drivers/pinctrl/sh-pfc/pfc-sh7264.c b/drivers/pinctrl/sh-pfc/pfc-sh7264.c
index e1c34e1922..3ddb9565ed 100644
--- a/drivers/pinctrl/sh-pfc/pfc-sh7264.c
+++ b/drivers/pinctrl/sh-pfc/pfc-sh7264.c
@@ -500,17 +500,15 @@ enum {
 	SD_WP_MARK, SD_CLK_MARK, SD_CMD_MARK,
 	CRX0_MARK, CRX1_MARK,
 	CTX0_MARK, CTX1_MARK,
+	CRX0_CRX1_MARK, CTX0_CTX1_MARK,
 
 	PWM1A_MARK, PWM1B_MARK, PWM1C_MARK, PWM1D_MARK,
 	PWM1E_MARK, PWM1F_MARK, PWM1G_MARK, PWM1H_MARK,
 	PWM2A_MARK, PWM2B_MARK, PWM2C_MARK, PWM2D_MARK,
 	PWM2E_MARK, PWM2F_MARK, PWM2G_MARK, PWM2H_MARK,
 	IERXD_MARK, IETXD_MARK,
-	CRX0_CRX1_MARK,
 	WDTOVF_MARK,
 
-	CRX0X1_MARK,
-
 	/* DMAC */
 	TEND0_MARK, DACK0_MARK, DREQ0_MARK,
 	TEND1_MARK, DACK1_MARK, DREQ1_MARK,
@@ -998,12 +996,12 @@ static const u16 pinmux_data[] = {
 
 	PINMUX_DATA(PJ3_DATA, PJ3MD_00),
 	PINMUX_DATA(CRX1_MARK, PJ3MD_01),
-	PINMUX_DATA(CRX0X1_MARK, PJ3MD_10),
+	PINMUX_DATA(CRX0_CRX1_MARK, PJ3MD_10),
 	PINMUX_DATA(IRQ1_PJ_MARK, PJ3MD_11),
 
 	PINMUX_DATA(PJ2_DATA, PJ2MD_000),
 	PINMUX_DATA(CTX1_MARK, PJ2MD_001),
-	PINMUX_DATA(CRX0_CRX1_MARK, PJ2MD_010),
+	PINMUX_DATA(CTX0_CTX1_MARK, PJ2MD_010),
 	PINMUX_DATA(CS2_MARK, PJ2MD_011),
 	PINMUX_DATA(SCK0_MARK, PJ2MD_100),
 	PINMUX_DATA(LCD_M_DISP_MARK, PJ2MD_101),
@@ -1248,6 +1246,7 @@ static const struct pinmux_func pinmux_func_gpios[] = {
 	GPIO_FN(CTX1),
 	GPIO_FN(CRX1),
 	GPIO_FN(CTX0),
+	GPIO_FN(CTX0_CTX1),
 	GPIO_FN(CRX0),
 	GPIO_FN(CRX0_CRX1),
 
diff --git a/drivers/pinctrl/sh-pfc/pfc-sh7269.c b/drivers/pinctrl/sh-pfc/pfc-sh7269.c
index cfdb4fc177..3df0c0d139 100644
--- a/drivers/pinctrl/sh-pfc/pfc-sh7269.c
+++ b/drivers/pinctrl/sh-pfc/pfc-sh7269.c
@@ -740,13 +740,12 @@ enum {
 	CRX0_MARK, CTX0_MARK,
 	CRX1_MARK, CTX1_MARK,
 	CRX2_MARK, CTX2_MARK,
-	CRX0_CRX1_MARK,
-	CRX0_CRX1_CRX2_MARK,
-	CTX0CTX1CTX2_MARK,
+	CRX0_CRX1_MARK, CTX0_CTX1_MARK,
+	CRX0_CRX1_CRX2_MARK, CTX0_CTX1_CTX2_MARK,
 	CRX1_PJ22_MARK, CTX1_PJ23_MARK,
 	CRX2_PJ20_MARK, CTX2_PJ21_MARK,
-	CRX0CRX1_PJ22_MARK,
-	CRX0CRX1CRX2_PJ20_MARK,
+	CRX0_CRX1_PJ22_MARK, CTX0_CTX1_PJ23_MARK,
+	CRX0_CRX1_CRX2_PJ20_MARK, CTX0_CTX1_CTX2_PJ21_MARK,
 
 	/* VDC */
 	DV_CLK_MARK,
@@ -824,6 +823,7 @@ static const u16 pinmux_data[] = {
 	PINMUX_DATA(CS3_MARK, PC8MD_001),
 	PINMUX_DATA(TXD7_MARK, PC8MD_010),
 	PINMUX_DATA(CTX1_MARK, PC8MD_011),
+	PINMUX_DATA(CTX0_CTX1_MARK, PC8MD_100),
 
 	PINMUX_DATA(PC7_DATA, PC7MD_000),
 	PINMUX_DATA(CKE_MARK, PC7MD_001),
@@ -836,11 +836,12 @@ static const u16 pinmux_data[] = {
 	PINMUX_DATA(CAS_MARK, PC6MD_001),
 	PINMUX_DATA(SCK7_MARK, PC6MD_010),
 	PINMUX_DATA(CTX0_MARK, PC6MD_011),
+	PINMUX_DATA(CTX0_CTX1_CTX2_MARK, PC6MD_100),
 
 	PINMUX_DATA(PC5_DATA, PC5MD_000),
 	PINMUX_DATA(RAS_MARK, PC5MD_001),
 	PINMUX_DATA(CRX0_MARK, PC5MD_011),
-	PINMUX_DATA(CTX0CTX1CTX2_MARK, PC5MD_100),
+	PINMUX_DATA(CTX0_CTX1_CTX2_MARK, PC5MD_100),
 	PINMUX_DATA(IRQ0_PC_MARK, PC5MD_101),
 
 	PINMUX_DATA(PC4_DATA, PC4MD_00),
@@ -1292,30 +1293,32 @@ static const u16 pinmux_data[] = {
 	PINMUX_DATA(LCD_DATA23_PJ23_MARK, PJ23MD_010),
 	PINMUX_DATA(LCD_TCON6_MARK, PJ23MD_011),
 	PINMUX_DATA(IRQ3_PJ_MARK, PJ23MD_100),
-	PINMUX_DATA(CTX1_MARK, PJ23MD_101),
+	PINMUX_DATA(CTX1_PJ23_MARK, PJ23MD_101),
+	PINMUX_DATA(CTX0_CTX1_PJ23_MARK, PJ23MD_110),
 
 	PINMUX_DATA(PJ22_DATA, PJ22MD_000),
 	PINMUX_DATA(DV_DATA22_MARK, PJ22MD_001),
 	PINMUX_DATA(LCD_DATA22_PJ22_MARK, PJ22MD_010),
 	PINMUX_DATA(LCD_TCON5_MARK, PJ22MD_011),
 	PINMUX_DATA(IRQ2_PJ_MARK, PJ22MD_100),
-	PINMUX_DATA(CRX1_MARK, PJ22MD_101),
-	PINMUX_DATA(CRX0_CRX1_MARK, PJ22MD_110),
+	PINMUX_DATA(CRX1_PJ22_MARK, PJ22MD_101),
+	PINMUX_DATA(CRX0_CRX1_PJ22_MARK, PJ22MD_110),
 
 	PINMUX_DATA(PJ21_DATA, PJ21MD_000),
 	PINMUX_DATA(DV_DATA21_MARK, PJ21MD_001),
 	PINMUX_DATA(LCD_DATA21_PJ21_MARK, PJ21MD_010),
 	PINMUX_DATA(LCD_TCON4_MARK, PJ21MD_011),
 	PINMUX_DATA(IRQ1_PJ_MARK, PJ21MD_100),
-	PINMUX_DATA(CTX2_MARK, PJ21MD_101),
+	PINMUX_DATA(CTX2_PJ21_MARK, PJ21MD_101),
+	PINMUX_DATA(CTX0_CTX1_CTX2_PJ21_MARK, PJ21MD_110),
 
 	PINMUX_DATA(PJ20_DATA, PJ20MD_000),
 	PINMUX_DATA(DV_DATA20_MARK, PJ20MD_001),
 	PINMUX_DATA(LCD_DATA20_PJ20_MARK, PJ20MD_010),
 	PINMUX_DATA(LCD_TCON3_MARK, PJ20MD_011),
 	PINMUX_DATA(IRQ0_PJ_MARK, PJ20MD_100),
-	PINMUX_DATA(CRX2_MARK, PJ20MD_101),
-	PINMUX_DATA(CRX0CRX1CRX2_PJ20_MARK, PJ20MD_110),
+	PINMUX_DATA(CRX2_PJ20_MARK, PJ20MD_101),
+	PINMUX_DATA(CRX0_CRX1_CRX2_PJ20_MARK, PJ20MD_110),
 
 	PINMUX_DATA(PJ19_DATA, PJ19MD_000),
 	PINMUX_DATA(DV_DATA19_MARK, PJ19MD_001),
@@ -1666,12 +1669,24 @@ static const struct pinmux_func pinmux_func_gpios[] = {
 	GPIO_FN(WDTOVF),
 
 	/* CAN */
+	GPIO_FN(CTX2),
+	GPIO_FN(CRX2),
 	GPIO_FN(CTX1),
 	GPIO_FN(CRX1),
 	GPIO_FN(CTX0),
 	GPIO_FN(CRX0),
+	GPIO_FN(CTX0_CTX1),
 	GPIO_FN(CRX0_CRX1),
+	GPIO_FN(CTX0_CTX1_CTX2),
 	GPIO_FN(CRX0_CRX1_CRX2),
+	GPIO_FN(CTX2_PJ21),
+	GPIO_FN(CRX2_PJ20),
+	GPIO_FN(CTX1_PJ23),
+	GPIO_FN(CRX1_PJ22),
+	GPIO_FN(CTX0_CTX1_PJ23),
+	GPIO_FN(CRX0_CRX1_PJ22),
+	GPIO_FN(CTX0_CTX1_CTX2_PJ21),
+	GPIO_FN(CRX0_CRX1_CRX2_PJ20),
 
 	/* DMAC */
 	GPIO_FN(TEND0),
diff --git a/drivers/regulator/rk808-regulator.c b/drivers/regulator/rk808-regulator.c
index e21ba7cd07..244bdd79e5 100644
--- a/drivers/regulator/rk808-regulator.c
+++ b/drivers/regulator/rk808-regulator.c
@@ -1504,7 +1504,7 @@ static int rk808_regulator_dt_parse_pdata(struct device *dev,
 		}
 
 		if (!pdata->dvs_gpio[i]) {
-			dev_warn(dev, "there is no dvs%d gpio\n", i);
+			dev_info(dev, "there is no dvs%d gpio\n", i);
 			continue;
 		}
 
diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index 4f7ce00971..b76ef5244b 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -1477,7 +1477,7 @@ static int __init remoteproc_init(void)
 
 	return 0;
 }
-module_init(remoteproc_init);
+subsys_initcall(remoteproc_init);
 
 static void __exit remoteproc_exit(void)
 {
diff --git a/drivers/scsi/aic7xxx/aic7xxx_core.c b/drivers/scsi/aic7xxx/aic7xxx_core.c
index 64ab9eaec4..def3208dd2 100644
--- a/drivers/scsi/aic7xxx/aic7xxx_core.c
+++ b/drivers/scsi/aic7xxx/aic7xxx_core.c
@@ -2321,7 +2321,7 @@ ahc_find_syncrate(struct ahc_softc *ahc, u_int *period,
 			 * At some speeds, we only support
 			 * ST transfers.
 			 */
-		 	if ((syncrate->sxfr_u2 & ST_SXFR) != 0)
+			if ((syncrate->sxfr_u2 & ST_SXFR) != 0)
 				*ppr_options &= ~MSG_EXT_PPR_DT_REQ;
 			break;
 		}
diff --git a/drivers/scsi/iscsi_tcp.c b/drivers/scsi/iscsi_tcp.c
index fccb8991bd..64a49dccb0 100644
--- a/drivers/scsi/iscsi_tcp.c
+++ b/drivers/scsi/iscsi_tcp.c
@@ -872,6 +872,10 @@ iscsi_sw_tcp_session_create(struct iscsi_endpoint *ep, uint16_t cmds_max,
 static void iscsi_sw_tcp_session_destroy(struct iscsi_cls_session *cls_session)
 {
 	struct Scsi_Host *shost = iscsi_session_to_shost(cls_session);
+	struct iscsi_session *session = cls_session->dd_data;
+
+	if (WARN_ON_ONCE(session->leadconn))
+		return;
 
 	iscsi_tcp_r2tpool_free(cls_session->dd_data);
 	iscsi_session_teardown(cls_session);
diff --git a/drivers/scsi/qla2xxx/qla_os.c b/drivers/scsi/qla2xxx/qla_os.c
index 8975baab73..daafb60fa1 100644
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@ -429,6 +429,12 @@ static int qla25xx_setup_mode(struct scsi_qla_host *vha)
 		goto fail;
 	}
 	if (ql2xmultique_tag) {
+		ha->wq = alloc_workqueue("qla2xxx_wq", WQ_MEM_RECLAIM, 1);
+		if (unlikely(!ha->wq)) {
+			ql_log(ql_log_warn, vha, 0x01e0,
+			    "Failed to alloc workqueue.\n");
+			goto fail;
+		}
 		/* create a request queue for IO */
 		options |= BIT_7;
 		req = qla25xx_create_req_que(ha, options, 0, 0, -1,
@@ -436,9 +442,8 @@ static int qla25xx_setup_mode(struct scsi_qla_host *vha)
 		if (!req) {
 			ql_log(ql_log_warn, vha, 0x00e0,
 			    "Failed to create request queue.\n");
-			goto fail;
+			goto fail2;
 		}
-		ha->wq = alloc_workqueue("qla2xxx_wq", WQ_MEM_RECLAIM, 1);
 		vha->req = ha->req_q_map[req];
 		options |= BIT_1;
 		for (ques = 1; ques < ha->max_rsp_queues; ques++) {
@@ -446,7 +451,7 @@ static int qla25xx_setup_mode(struct scsi_qla_host *vha)
 			if (!ret) {
 				ql_log(ql_log_warn, vha, 0x00e8,
 				    "Failed to create response queue.\n");
-				goto fail2;
+				goto fail3;
 			}
 		}
 		ha->flags.cpu_affinity_enabled = 1;
@@ -460,11 +465,13 @@ static int qla25xx_setup_mode(struct scsi_qla_host *vha)
 		    ha->max_rsp_queues, ha->max_req_queues);
 	}
 	return 0;
-fail2:
+
+fail3:
 	qla25xx_delete_queues(vha);
-	destroy_workqueue(ha->wq);
-	ha->wq = NULL;
 	vha->req = ha->req_q_map[0];
+fail2:
+        destroy_workqueue(ha->wq);
+        ha->wq = NULL;
 fail:
 	ha->mqenable = 0;
 	kfree(ha->req_q_map);
diff --git a/drivers/scsi/scsi_transport_iscsi.c b/drivers/scsi/scsi_transport_iscsi.c
index ab32e60736..20cf01d6de 100644
--- a/drivers/scsi/scsi_transport_iscsi.c
+++ b/drivers/scsi/scsi_transport_iscsi.c
@@ -2965,6 +2965,24 @@ iscsi_set_path(struct iscsi_transport *transport, struct iscsi_uevent *ev)
 	return err;
 }
 
+static int iscsi_session_has_conns(int sid)
+{
+	struct iscsi_cls_conn *conn;
+	unsigned long flags;
+	int found = 0;
+
+	spin_lock_irqsave(&connlock, flags);
+	list_for_each_entry(conn, &connlist, conn_list) {
+		if (iscsi_conn_get_sid(conn) == sid) {
+			found = 1;
+			break;
+		}
+	}
+	spin_unlock_irqrestore(&connlock, flags);
+
+	return found;
+}
+
 static int
 iscsi_set_iface_params(struct iscsi_transport *transport,
 		       struct iscsi_uevent *ev, uint32_t len)
@@ -3539,10 +3557,12 @@ iscsi_if_recv_msg(struct sk_buff *skb, struct nlmsghdr *nlh, uint32_t *group)
 		break;
 	case ISCSI_UEVENT_DESTROY_SESSION:
 		session = iscsi_session_lookup(ev->u.d_session.sid);
-		if (session)
-			transport->destroy_session(session);
-		else
+		if (!session)
 			err = -EINVAL;
+		else if (iscsi_session_has_conns(ev->u.d_session.sid))
+			err = -EBUSY;
+		else
+			transport->destroy_session(session);
 		break;
 	case ISCSI_UEVENT_UNBIND_SESSION:
 		session = iscsi_session_lookup(ev->u.d_session.sid);
diff --git a/drivers/soc/tegra/fuse/tegra-apbmisc.c b/drivers/soc/tegra/fuse/tegra-apbmisc.c
index 5b18f6ffa4..cd61c883c1 100644
--- a/drivers/soc/tegra/fuse/tegra-apbmisc.c
+++ b/drivers/soc/tegra/fuse/tegra-apbmisc.c
@@ -134,7 +134,7 @@ void __init tegra_init_apbmisc(void)
 			apbmisc.flags = IORESOURCE_MEM;
 
 			/* strapping options */
-			if (tegra_get_chip_id() == TEGRA124) {
+			if (of_machine_is_compatible("nvidia,tegra124")) {
 				straps.start = 0x7000e864;
 				straps.end = 0x7000e867;
 			} else {
diff --git a/drivers/staging/android/ashmem.c b/drivers/staging/android/ashmem.c
index 208e07fbee..37cb588043 100644
--- a/drivers/staging/android/ashmem.c
+++ b/drivers/staging/android/ashmem.c
@@ -357,8 +357,23 @@ static inline vm_flags_t calc_vm_may_flags(unsigned long prot)
 	       _calc_vm_trans(prot, PROT_EXEC,  VM_MAYEXEC);
 }
 
+static int ashmem_vmfile_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	/* do not allow to mmap ashmem backing shmem file directly */
+	return -EPERM;
+}
+
+static unsigned long
+ashmem_vmfile_get_unmapped_area(struct file *file, unsigned long addr,
+				unsigned long len, unsigned long pgoff,
+				unsigned long flags)
+{
+	return current->mm->get_unmapped_area(file, addr, len, pgoff, flags);
+}
+
 static int ashmem_mmap(struct file *file, struct vm_area_struct *vma)
 {
+	static struct file_operations vmfile_fops;
 	struct ashmem_area *asma = file->private_data;
 	int ret = 0;
 
@@ -399,6 +414,19 @@ static int ashmem_mmap(struct file *file, struct vm_area_struct *vma)
 		}
 		vmfile->f_mode |= FMODE_LSEEK;
 		asma->file = vmfile;
+		/*
+		 * override mmap operation of the vmfile so that it can't be
+		 * remapped which would lead to creation of a new vma with no
+		 * asma permission checks. Have to override get_unmapped_area
+		 * as well to prevent VM_BUG_ON check for f_ops modification.
+		 */
+		if (!vmfile_fops.mmap) {
+			vmfile_fops = *vmfile->f_op;
+			vmfile_fops.mmap = ashmem_vmfile_mmap;
+			vmfile_fops.get_unmapped_area =
+					ashmem_vmfile_get_unmapped_area;
+		}
+		vmfile->f_op = &vmfile_fops;
 	}
 	get_file(asma->file);
 
diff --git a/drivers/staging/rtl8188eu/os_dep/ioctl_linux.c b/drivers/staging/rtl8188eu/os_dep/ioctl_linux.c
index ec90f27810..2a6192e08b 100644
--- a/drivers/staging/rtl8188eu/os_dep/ioctl_linux.c
+++ b/drivers/staging/rtl8188eu/os_dep/ioctl_linux.c
@@ -2054,7 +2054,7 @@ static int wpa_supplicant_ioctl(struct net_device *dev, struct iw_point *p)
 	struct ieee_param *param;
 	uint ret = 0;
 
-	if (p->length < sizeof(struct ieee_param) || !p->pointer) {
+	if (!p->pointer || p->length != sizeof(struct ieee_param)) {
 		ret = -EINVAL;
 		goto out;
 	}
@@ -2859,7 +2859,7 @@ static int rtw_hostapd_ioctl(struct net_device *dev, struct iw_point *p)
 		goto out;
 	}
 
-	if (!p->pointer) {
+	if (!p->pointer || p->length != sizeof(struct ieee_param)) {
 		ret = -EINVAL;
 		goto out;
 	}
diff --git a/drivers/staging/vt6656/dpc.c b/drivers/staging/vt6656/dpc.c
index e6367ed3b0..4fc6f00666 100644
--- a/drivers/staging/vt6656/dpc.c
+++ b/drivers/staging/vt6656/dpc.c
@@ -144,7 +144,7 @@ int vnt_rx_data(struct vnt_private *priv, struct vnt_rcb *ptr_rcb,
 
 	vnt_rf_rssi_to_dbm(priv, *rssi, &rx_dbm);
 
-	priv->bb_pre_ed_rssi = (u8)rx_dbm + 1;
+	priv->bb_pre_ed_rssi = (u8)-rx_dbm + 1;
 	priv->current_rssi = priv->bb_pre_ed_rssi;
 
 	frame = skb_data + 8;
diff --git a/drivers/target/iscsi/iscsi_target.c b/drivers/target/iscsi/iscsi_target.c
index 07d9384bce..cbb4414edd 100644
--- a/drivers/target/iscsi/iscsi_target.c
+++ b/drivers/target/iscsi/iscsi_target.c
@@ -993,9 +993,7 @@ int iscsit_setup_scsi_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
 		hdr->cmdsn, be32_to_cpu(hdr->data_length), payload_length,
 		conn->cid);
 
-	if (target_get_sess_cmd(&cmd->se_cmd, true) < 0)
-		return iscsit_add_reject_cmd(cmd,
-				ISCSI_REASON_WAITING_FOR_LOGOUT, buf);
+	target_get_sess_cmd(&cmd->se_cmd, true);
 
 	cmd->sense_reason = transport_lookup_cmd_lun(&cmd->se_cmd,
 						     scsilun_to_int(&hdr->lun));
@@ -1806,9 +1804,7 @@ iscsit_handle_task_mgt_cmd(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
 			      conn->sess->se_sess, 0, DMA_NONE,
 			      TCM_SIMPLE_TAG, cmd->sense_buffer + 2);
 
-	if (target_get_sess_cmd(&cmd->se_cmd, true) < 0)
-		return iscsit_add_reject_cmd(cmd,
-				ISCSI_REASON_WAITING_FOR_LOGOUT, buf);
+	target_get_sess_cmd(&cmd->se_cmd, true);
 
 	/*
 	 * TASK_REASSIGN for ERL=2 / connection stays inside of
@@ -4309,6 +4305,9 @@ int iscsit_close_connection(
 	iscsit_stop_nopin_response_timer(conn);
 	iscsit_stop_nopin_timer(conn);
 
+	if (conn->conn_transport->iscsit_wait_conn)
+		conn->conn_transport->iscsit_wait_conn(conn);
+
 	/*
 	 * During Connection recovery drop unacknowledged out of order
 	 * commands for this connection, and prepare the other commands
@@ -4391,11 +4390,6 @@ int iscsit_close_connection(
 	 * must wait until they have completed.
 	 */
 	iscsit_check_conn_usage_count(conn);
-	target_sess_cmd_list_set_waiting(sess->se_sess);
-	target_wait_for_sess_cmds(sess->se_sess);
-
-	if (conn->conn_transport->iscsit_wait_conn)
-		conn->conn_transport->iscsit_wait_conn(conn);
 
 	if (conn->conn_rx_hash.tfm)
 		crypto_free_hash(conn->conn_rx_hash.tfm);
diff --git a/drivers/tty/serial/imx.c b/drivers/tty/serial/imx.c
index b59d0dafef..ca69e2ca6b 100644
--- a/drivers/tty/serial/imx.c
+++ b/drivers/tty/serial/imx.c
@@ -529,7 +529,7 @@ static void imx_dma_tx(struct imx_port *sport)
 
 	sport->tx_bytes = uart_circ_chars_pending(xmit);
 
-	if (xmit->tail < xmit->head) {
+	if (xmit->tail < xmit->head || xmit->head == 0) {
 		sport->dma_tx_nents = 1;
 		sg_init_one(sgl, xmit->buf + xmit->tail, sport->tx_bytes);
 	} else {
diff --git a/drivers/tty/vt/vt_ioctl.c b/drivers/tty/vt/vt_ioctl.c
index a86bc7afb3..e9d9f9f3dc 100644
--- a/drivers/tty/vt/vt_ioctl.c
+++ b/drivers/tty/vt/vt_ioctl.c
@@ -850,58 +850,49 @@ int vt_ioctl(struct tty_struct *tty,
 
 	case VT_RESIZEX:
 	{
-		struct vt_consize __user *vtconsize = up;
-		ushort ll,cc,vlin,clin,vcol,ccol;
+		struct vt_consize v;
 		if (!perm)
 			return -EPERM;
-		if (!access_ok(VERIFY_READ, vtconsize,
-				sizeof(struct vt_consize))) {
-			ret = -EFAULT;
-			break;
-		}
+		if (copy_from_user(&v, up, sizeof(struct vt_consize)))
+			return -EFAULT;
 		/* FIXME: Should check the copies properly */
-		__get_user(ll, &vtconsize->v_rows);
-		__get_user(cc, &vtconsize->v_cols);
-		__get_user(vlin, &vtconsize->v_vlin);
-		__get_user(clin, &vtconsize->v_clin);
-		__get_user(vcol, &vtconsize->v_vcol);
-		__get_user(ccol, &vtconsize->v_ccol);
-		vlin = vlin ? vlin : vc->vc_scan_lines;
-		if (clin) {
-			if (ll) {
-				if (ll != vlin/clin) {
-					/* Parameters don't add up */
-					ret = -EINVAL;
-					break;
-				}
-			} else 
-				ll = vlin/clin;
+		if (!v.v_vlin)
+			v.v_vlin = vc->vc_scan_lines;
+		if (v.v_clin) {
+			int rows = v.v_vlin/v.v_clin;
+			if (v.v_rows != rows) {
+				if (v.v_rows) /* Parameters don't add up */
+					return -EINVAL;
+				v.v_rows = rows;
+			}
 		}
-		if (vcol && ccol) {
-			if (cc) {
-				if (cc != vcol/ccol) {
-					ret = -EINVAL;
-					break;
-				}
-			} else
-				cc = vcol/ccol;
+		if (v.v_vcol && v.v_ccol) {
+			int cols = v.v_vcol/v.v_ccol;
+			if (v.v_cols != cols) {
+				if (v.v_cols)
+					return -EINVAL;
+				v.v_cols = cols;
+			}
 		}
 
-		if (clin > 32) {
-			ret =  -EINVAL;
-			break;
-		}
-		    
+		if (v.v_clin > 32)
+			return -EINVAL;
+
 		for (i = 0; i < MAX_NR_CONSOLES; i++) {
+			struct vc_data *vcp;
+
 			if (!vc_cons[i].d)
 				continue;
 			console_lock();
-			if (vlin)
-				vc_cons[i].d->vc_scan_lines = vlin;
-			if (clin)
-				vc_cons[i].d->vc_font.height = clin;
-			vc_cons[i].d->vc_resize_user = 1;
-			vc_resize(vc_cons[i].d, cc, ll);
+			vcp = vc_cons[i].d;
+			if (vcp) {
+				if (v.v_vlin)
+					vcp->vc_scan_lines = v.v_vlin;
+				if (v.v_clin)
+					vcp->vc_font.height = v.v_clin;
+				vcp->vc_resize_user = 1;
+				vc_resize(vcp, v.v_cols, v.v_rows);
+			}
 			console_unlock();
 		}
 		break;
diff --git a/drivers/uio/uio_dmem_genirq.c b/drivers/uio/uio_dmem_genirq.c
index e1134a4d97..a00b4aee6c 100644
--- a/drivers/uio/uio_dmem_genirq.c
+++ b/drivers/uio/uio_dmem_genirq.c
@@ -135,11 +135,13 @@ static int uio_dmem_genirq_irqcontrol(struct uio_info *dev_info, s32 irq_on)
 	if (irq_on) {
 		if (test_and_clear_bit(0, &priv->flags))
 			enable_irq(dev_info->irq);
+		spin_unlock_irqrestore(&priv->lock, flags);
 	} else {
-		if (!test_and_set_bit(0, &priv->flags))
+		if (!test_and_set_bit(0, &priv->flags)) {
+			spin_unlock_irqrestore(&priv->lock, flags);
 			disable_irq(dev_info->irq);
+		}
 	}
-	spin_unlock_irqrestore(&priv->lock, flags);
 
 	return 0;
 }
diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 9f92e88968..3abdbc36bc 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -1210,11 +1210,6 @@ static void hub_activate(struct usb_hub *hub, enum hub_activation_type type)
 #ifdef CONFIG_PM
 			udev->reset_resume = 1;
 #endif
-			/* Don't set the change_bits when the device
-			 * was powered off.
-			 */
-			if (test_bit(port1, hub->power_bits))
-				set_bit(port1, hub->change_bits);
 
 		} else {
 			/* The power session is gone; tell hub_wq */
diff --git a/drivers/usb/core/quirks.c b/drivers/usb/core/quirks.c
index d51ae62f56..57b3b8d8fc 100644
--- a/drivers/usb/core/quirks.c
+++ b/drivers/usb/core/quirks.c
@@ -302,6 +302,9 @@ static const struct usb_device_id usb_quirk_list[] = {
 	/* INTEL VALUE SSD */
 	{ USB_DEVICE(0x8086, 0xf1a5), .driver_info = USB_QUIRK_RESET_RESUME },
 
+	/* novation SoundControl XL */
+	{ USB_DEVICE(0x1235, 0x0061), .driver_info = USB_QUIRK_RESET_RESUME },
+
 	{ }  /* terminating entry must be last */
 };
 
diff --git a/drivers/usb/gadget/udc/gr_udc.c b/drivers/usb/gadget/udc/gr_udc.c
index b9429bc425..594639e5cb 100644
--- a/drivers/usb/gadget/udc/gr_udc.c
+++ b/drivers/usb/gadget/udc/gr_udc.c
@@ -2201,8 +2201,6 @@ static int gr_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
-	spin_lock(&dev->lock);
-
 	/* Inside lock so that no gadget can use this udc until probe is done */
 	retval = usb_add_gadget_udc(dev->dev, &dev->gadget);
 	if (retval) {
@@ -2211,15 +2209,21 @@ static int gr_probe(struct platform_device *pdev)
 	}
 	dev->added = 1;
 
+	spin_lock(&dev->lock);
+
 	retval = gr_udc_init(dev);
-	if (retval)
+	if (retval) {
+		spin_unlock(&dev->lock);
 		goto out;
-
-	gr_dfs_create(dev);
+	}
 
 	/* Clear all interrupt enables that might be left on since last boot */
 	gr_disable_interrupts_and_pullup(dev);
 
+	spin_unlock(&dev->lock);
+
+	gr_dfs_create(dev);
+
 	retval = gr_request_irq(dev, dev->irq);
 	if (retval) {
 		dev_err(dev->dev, "Failed to request irq %d\n", dev->irq);
@@ -2248,8 +2252,6 @@ static int gr_probe(struct platform_device *pdev)
 		dev_info(dev->dev, "regs: %p, irq %d\n", dev->regs, dev->irq);
 
 out:
-	spin_unlock(&dev->lock);
-
 	if (retval)
 		gr_remove(pdev);
 
diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index 38a4ec082f..12a18062e2 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -53,6 +53,7 @@
 #define PCI_DEVICE_ID_INTEL_BROXTON_B_XHCI		0x1aa8
 #define PCI_DEVICE_ID_INTEL_APL_XHCI			0x5aa8
 #define PCI_DEVICE_ID_INTEL_DNV_XHCI			0x19d0
+#define PCI_DEVICE_ID_INTEL_CML_XHCI			0xa3af
 
 static const char hcd_name[] = "xhci_hcd";
 
@@ -169,7 +170,8 @@ static void xhci_pci_quirks(struct device *dev, struct xhci_hcd *xhci)
 		 pdev->device == PCI_DEVICE_ID_INTEL_BROXTON_M_XHCI ||
 		 pdev->device == PCI_DEVICE_ID_INTEL_BROXTON_B_XHCI ||
 		 pdev->device == PCI_DEVICE_ID_INTEL_APL_XHCI ||
-		 pdev->device == PCI_DEVICE_ID_INTEL_DNV_XHCI)) {
+		 pdev->device == PCI_DEVICE_ID_INTEL_DNV_XHCI ||
+		 pdev->device == PCI_DEVICE_ID_INTEL_CML_XHCI)) {
 		xhci->quirks |= XHCI_PME_STUCK_QUIRK;
 	}
 	if (pdev->vendor == PCI_VENDOR_ID_INTEL &&
diff --git a/drivers/usb/storage/uas.c b/drivers/usb/storage/uas.c
index a7cc0bc68d..b38d9f1621 100644
--- a/drivers/usb/storage/uas.c
+++ b/drivers/usb/storage/uas.c
@@ -46,6 +46,7 @@ struct uas_dev_info {
 	struct scsi_cmnd *cmnd[MAX_CMNDS];
 	spinlock_t lock;
 	struct work_struct work;
+	struct work_struct scan_work;      /* for async scanning */
 };
 
 enum {
@@ -115,6 +116,17 @@ static void uas_do_work(struct work_struct *work)
 	spin_unlock_irqrestore(&devinfo->lock, flags);
 }
 
+static void uas_scan_work(struct work_struct *work)
+{
+	struct uas_dev_info *devinfo =
+		container_of(work, struct uas_dev_info, scan_work);
+	struct Scsi_Host *shost = usb_get_intfdata(devinfo->intf);
+
+	dev_dbg(&devinfo->intf->dev, "starting scan\n");
+	scsi_scan_host(shost);
+	dev_dbg(&devinfo->intf->dev, "scan complete\n");
+}
+
 static void uas_add_work(struct uas_cmd_info *cmdinfo)
 {
 	struct scsi_pointer *scp = (void *)cmdinfo;
@@ -929,6 +941,7 @@ static int uas_probe(struct usb_interface *intf, const struct usb_device_id *id)
 	init_usb_anchor(&devinfo->data_urbs);
 	spin_lock_init(&devinfo->lock);
 	INIT_WORK(&devinfo->work, uas_do_work);
+	INIT_WORK(&devinfo->scan_work, uas_scan_work);
 
 	result = uas_configure_endpoints(devinfo);
 	if (result)
@@ -945,7 +958,9 @@ static int uas_probe(struct usb_interface *intf, const struct usb_device_id *id)
 	if (result)
 		goto free_streams;
 
-	scsi_scan_host(shost);
+	/* Submit the delayed_work for SCSI-device scanning */
+	schedule_work(&devinfo->scan_work);
+
 	return result;
 
 free_streams:
@@ -1113,6 +1128,12 @@ static void uas_disconnect(struct usb_interface *intf)
 	usb_kill_anchored_urbs(&devinfo->data_urbs);
 	uas_zap_pending(devinfo, DID_NO_CONNECT);
 
+	/*
+	 * Prevent SCSI scanning (if it hasn't started yet)
+	 * or wait for the SCSI-scanning routine to stop.
+	 */
+	cancel_work_sync(&devinfo->scan_work);
+
 	scsi_remove_host(shost);
 	uas_free_streams(devinfo);
 	scsi_host_put(shost);
diff --git a/drivers/xen/preempt.c b/drivers/xen/preempt.c
index 08cb419eb4..5f6b77ea34 100644
--- a/drivers/xen/preempt.c
+++ b/drivers/xen/preempt.c
@@ -37,7 +37,9 @@ asmlinkage __visible void xen_maybe_preempt_hcall(void)
 		 * cpu.
 		 */
 		__this_cpu_write(xen_in_preemptible_hcall, false);
-		_cond_resched();
+		local_irq_enable();
+		cond_resched();
+		local_irq_disable();
 		__this_cpu_write(xen_in_preemptible_hcall, true);
 	}
 }
diff --git a/fs/btrfs/disk-io.c b/fs/btrfs/disk-io.c
index 2fb533233e..656f0b7681 100644
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -2972,6 +2972,7 @@ int open_ctree(struct super_block *sb,
 
 	/* do not make disk changes in broken FS */
 	if (btrfs_super_log_root(disk_super) != 0) {
+		btrfs_info(fs_info, "start tree-log replay");
 		ret = btrfs_replay_log(fs_info, fs_devices);
 		if (ret) {
 			err = ret;
diff --git a/fs/btrfs/extent_map.c b/fs/btrfs/extent_map.c
index 84fb56d5c0..3818b65b06 100644
--- a/fs/btrfs/extent_map.c
+++ b/fs/btrfs/extent_map.c
@@ -227,6 +227,17 @@ static void try_merge_map(struct extent_map_tree *tree, struct extent_map *em)
 	struct extent_map *merge = NULL;
 	struct rb_node *rb;
 
+	/*
+	 * We can't modify an extent map that is in the tree and that is being
+	 * used by another task, as it can cause that other task to see it in
+	 * inconsistent state during the merging. We always have 1 reference for
+	 * the tree and 1 for this task (which is unpinning the extent map or
+	 * clearing the logging flag), so anything > 2 means it's being used by
+	 * other tasks too.
+	 */
+	if (atomic_read(&em->refs) > 2)
+		return;
+
 	if (em->start != 0) {
 		rb = rb_prev(&em->rb_node);
 		if (rb)
diff --git a/fs/btrfs/ordered-data.c b/fs/btrfs/ordered-data.c
index 8c27292ea9..2eadc8f8c9 100644
--- a/fs/btrfs/ordered-data.c
+++ b/fs/btrfs/ordered-data.c
@@ -820,10 +820,15 @@ int btrfs_wait_ordered_range(struct inode *inode, u64 start, u64 len)
 		}
 		btrfs_start_ordered_extent(inode, ordered, 1);
 		end = ordered->file_offset;
+		/*
+		 * If the ordered extent had an error save the error but don't
+		 * exit without waiting first for all other ordered extents in
+		 * the range to complete.
+		 */
 		if (test_bit(BTRFS_ORDERED_IOERR, &ordered->flags))
 			ret = -EIO;
 		btrfs_put_ordered_extent(ordered);
-		if (ret || end == 0 || end == start)
+		if (end == 0 || end == start)
 			break;
 		end--;
 	}
diff --git a/fs/btrfs/super.c b/fs/btrfs/super.c
index df211bad25..404051bf5c 100644
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -1702,6 +1702,8 @@ static int btrfs_remount(struct super_block *sb, int *flags, char *data)
 		}
 
 		if (btrfs_super_log_root(fs_info->super_copy) != 0) {
+			btrfs_warn(fs_info,
+		"mount required to replay tree-log, cannot remount read-write");
 			ret = -EINVAL;
 			goto restore;
 		}
diff --git a/fs/ecryptfs/crypto.c b/fs/ecryptfs/crypto.c
index f246f1760b..83e9f6272b 100644
--- a/fs/ecryptfs/crypto.c
+++ b/fs/ecryptfs/crypto.c
@@ -346,8 +346,10 @@ static int crypt_scatterlist(struct ecryptfs_crypt_stat *crypt_stat,
 	struct extent_crypt_result ecr;
 	int rc = 0;
 
-	BUG_ON(!crypt_stat || !crypt_stat->tfm
-	       || !(crypt_stat->flags & ECRYPTFS_STRUCT_INITIALIZED));
+	if (!crypt_stat || !crypt_stat->tfm
+	       || !(crypt_stat->flags & ECRYPTFS_STRUCT_INITIALIZED))
+		return -EINVAL;
+
 	if (unlikely(ecryptfs_verbosity > 0)) {
 		ecryptfs_printk(KERN_DEBUG, "Key size [%zd]; key:\n",
 				crypt_stat->key_size);
diff --git a/fs/ecryptfs/keystore.c b/fs/ecryptfs/keystore.c
index 20632ee51a..b272b778aa 100644
--- a/fs/ecryptfs/keystore.c
+++ b/fs/ecryptfs/keystore.c
@@ -1280,7 +1280,7 @@ parse_tag_1_packet(struct ecryptfs_crypt_stat *crypt_stat,
 		printk(KERN_ERR "Enter w/ first byte != 0x%.2x\n",
 		       ECRYPTFS_TAG_1_PACKET_TYPE);
 		rc = -EINVAL;
-		goto out;
+		goto out_free;
 	}
 	/* Released: wipe_auth_tok_list called in ecryptfs_parse_packet_set or
 	 * at end of function upon failure */
diff --git a/fs/ecryptfs/messaging.c b/fs/ecryptfs/messaging.c
index 4f457d5c49..26464f9d9b 100644
--- a/fs/ecryptfs/messaging.c
+++ b/fs/ecryptfs/messaging.c
@@ -397,6 +397,7 @@ int __init ecryptfs_init_messaging(void)
 					* ecryptfs_message_buf_len),
 				       GFP_KERNEL);
 	if (!ecryptfs_msg_ctx_arr) {
+		kfree(ecryptfs_daemon_hash);
 		rc = -ENOMEM;
 		printk(KERN_ERR "%s: Failed to allocate memory\n", __func__);
 		goto out;
diff --git a/fs/ext4/dir.c b/fs/ext4/dir.c
index 209018f08d..7b626e9429 100644
--- a/fs/ext4/dir.c
+++ b/fs/ext4/dir.c
@@ -125,12 +125,14 @@ static int ext4_readdir(struct file *file, struct dir_context *ctx)
 		if (err != ERR_BAD_DX_DIR) {
 			return err;
 		}
-		/*
-		 * We don't set the inode dirty flag since it's not
-		 * critical that it get flushed back to the disk.
-		 */
-		ext4_clear_inode_flag(file_inode(file),
-				      EXT4_INODE_INDEX);
+		/* Can we just clear INDEX flag to ignore htree information? */
+		if (!ext4_has_metadata_csum(sb)) {
+			/*
+			 * We don't set the inode dirty flag since it's not
+			 * critical that it gets flushed back to the disk.
+			 */
+			ext4_clear_inode_flag(inode, EXT4_INODE_INDEX);
+		}
 	}
 
 	if (ext4_has_inline_data(inode)) {
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 977a742342..700c24daac 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2382,8 +2382,11 @@ int ext4_insert_dentry(struct inode *dir,
 		       struct ext4_filename *fname);
 static inline void ext4_update_dx_flag(struct inode *inode)
 {
-	if (!ext4_has_feature_dir_index(inode->i_sb))
+	if (!ext4_has_feature_dir_index(inode->i_sb)) {
+		/* ext4_iget() should have caught this... */
+		WARN_ON_ONCE(ext4_has_feature_metadata_csum(inode->i_sb));
 		ext4_clear_inode_flag(inode, EXT4_INODE_INDEX);
+	}
 }
 static unsigned char ext4_filetype_table[] = {
 	DT_UNKNOWN, DT_REG, DT_DIR, DT_CHR, DT_BLK, DT_FIFO, DT_SOCK, DT_LNK
@@ -2850,7 +2853,7 @@ static inline void ext4_update_i_disksize(struct inode *inode, loff_t newsize)
 		     !mutex_is_locked(&inode->i_mutex));
 	down_write(&EXT4_I(inode)->i_data_sem);
 	if (newsize > EXT4_I(inode)->i_disksize)
-		EXT4_I(inode)->i_disksize = newsize;
+		WRITE_ONCE(EXT4_I(inode)->i_disksize, newsize);
 	up_write(&EXT4_I(inode)->i_data_sem);
 }
 
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index be34fa3258..7abdd8c1dc 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -2333,7 +2333,7 @@ static int mpage_map_and_submit_extent(handle_t *handle,
 	 * truncate are avoided by checking i_size under i_data_sem.
 	 */
 	disksize = ((loff_t)mpd->first_page) << PAGE_CACHE_SHIFT;
-	if (disksize > EXT4_I(inode)->i_disksize) {
+	if (disksize > READ_ONCE(EXT4_I(inode)->i_disksize)) {
 		int err2;
 		loff_t i_size;
 
@@ -4372,6 +4372,18 @@ struct inode *ext4_iget(struct super_block *sb, unsigned long ino)
 		ret = -EFSCORRUPTED;
 		goto bad_inode;
 	}
+	/*
+	 * If dir_index is not enabled but there's dir with INDEX flag set,
+	 * we'd normally treat htree data as empty space. But with metadata
+	 * checksumming that corrupts checksums so forbid that.
+	 */
+	if (!ext4_has_feature_dir_index(sb) && ext4_has_metadata_csum(sb) &&
+	    ext4_test_inode_flag(inode, EXT4_INODE_INDEX)) {
+		EXT4_ERROR_INODE(inode,
+				 "iget: Dir with htree data on filesystem without dir_index feature.");
+		ret = -EFSCORRUPTED;
+		goto bad_inode;
+	}
 	ei->i_disksize = inode->i_size;
 #ifdef CONFIG_QUOTA
 	ei->i_reserved_quota = 0;
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index 712bf332e3..49e0d97b2e 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -1418,6 +1418,7 @@ static struct buffer_head * ext4_find_entry (struct inode *dir,
 		/*
 		 * We deal with the read-ahead logic here.
 		 */
+		cond_resched();
 		if (ra_ptr >= ra_max) {
 			/* Refill the readahead buffer */
 			ra_ptr = 0;
@@ -2121,6 +2122,13 @@ static int ext4_add_entry(handle_t *handle, struct dentry *dentry,
 		retval = ext4_dx_add_entry(handle, &fname, dentry, inode);
 		if (!retval || (retval != ERR_BAD_DX_DIR))
 			goto out;
+		/* Can we just ignore htree data? */
+		if (ext4_has_metadata_csum(sb)) {
+			EXT4_ERROR_INODE(dir,
+				"Directory has corrupted htree index.");
+			retval = -EFSCORRUPTED;
+			goto out;
+		}
 		ext4_clear_inode_flag(dir, EXT4_INODE_INDEX);
 		dx_fallback++;
 		ext4_mark_inode_dirty(handle, dir);
diff --git a/fs/jbd2/checkpoint.c b/fs/jbd2/checkpoint.c
index 4d5a5a4cc0..addb0784dd 100644
--- a/fs/jbd2/checkpoint.c
+++ b/fs/jbd2/checkpoint.c
@@ -168,7 +168,7 @@ void __jbd2_log_wait_for_space(journal_t *journal)
 				       "journal space in %s\n", __func__,
 				       journal->j_devname);
 				WARN_ON(1);
-				jbd2_journal_abort(journal, 0);
+				jbd2_journal_abort(journal, -EIO);
 			}
 			write_lock(&journal->j_state_lock);
 		} else {
diff --git a/fs/jbd2/commit.c b/fs/jbd2/commit.c
index ebbd7d054c..a7d12dd6d5 100644
--- a/fs/jbd2/commit.c
+++ b/fs/jbd2/commit.c
@@ -797,7 +797,7 @@ void jbd2_journal_commit_transaction(journal_t *journal)
 		err = journal_submit_commit_record(journal, commit_transaction,
 						 &cbh, crc32_sum);
 		if (err)
-			__jbd2_journal_abort_hard(journal);
+			jbd2_journal_abort(journal, err);
 	}
 
 	blk_finish_plug(&plug);
@@ -890,7 +890,7 @@ void jbd2_journal_commit_transaction(journal_t *journal)
 		err = journal_submit_commit_record(journal, commit_transaction,
 						&cbh, crc32_sum);
 		if (err)
-			__jbd2_journal_abort_hard(journal);
+			jbd2_journal_abort(journal, err);
 	}
 	if (cbh)
 		err = journal_wait_on_commit_record(journal, cbh);
@@ -987,29 +987,33 @@ void jbd2_journal_commit_transaction(journal_t *journal)
 		 * it. */
 
 		/*
-		* A buffer which has been freed while still being journaled by
-		* a previous transaction.
-		*/
-		if (buffer_freed(bh)) {
+		 * A buffer which has been freed while still being journaled
+		 * by a previous transaction, refile the buffer to BJ_Forget of
+		 * the running transaction. If the just committed transaction
+		 * contains "add to orphan" operation, we can completely
+		 * invalidate the buffer now. We are rather through in that
+		 * since the buffer may be still accessible when blocksize <
+		 * pagesize and it is attached to the last partial page.
+		 */
+		if (buffer_freed(bh) && !jh->b_next_transaction) {
+			struct address_space *mapping;
+
+			clear_buffer_freed(bh);
+			clear_buffer_jbddirty(bh);
+
 			/*
-			 * If the running transaction is the one containing
-			 * "add to orphan" operation (b_next_transaction !=
-			 * NULL), we have to wait for that transaction to
-			 * commit before we can really get rid of the buffer.
-			 * So just clear b_modified to not confuse transaction
-			 * credit accounting and refile the buffer to
-			 * BJ_Forget of the running transaction. If the just
-			 * committed transaction contains "add to orphan"
-			 * operation, we can completely invalidate the buffer
-			 * now. We are rather through in that since the
-			 * buffer may be still accessible when blocksize <
-			 * pagesize and it is attached to the last partial
-			 * page.
+			 * Block device buffers need to stay mapped all the
+			 * time, so it is enough to clear buffer_jbddirty and
+			 * buffer_freed bits. For the file mapping buffers (i.e.
+			 * journalled data) we need to unmap buffer and clear
+			 * more bits. We also need to be careful about the check
+			 * because the data page mapping can get cleared under
+			 * out hands, which alse need not to clear more bits
+			 * because the page and buffers will be freed and can
+			 * never be reused once we are done with them.
 			 */
-			jh->b_modified = 0;
-			if (!jh->b_next_transaction) {
-				clear_buffer_freed(bh);
-				clear_buffer_jbddirty(bh);
+			mapping = READ_ONCE(bh->b_page->mapping);
+			if (mapping && !sb_is_blkdev_sb(mapping->host->i_sb)) {
 				clear_buffer_mapped(bh);
 				clear_buffer_new(bh);
 				clear_buffer_req(bh);
diff --git a/fs/jbd2/journal.c b/fs/jbd2/journal.c
index 9398d1b705..d62435897d 100644
--- a/fs/jbd2/journal.c
+++ b/fs/jbd2/journal.c
@@ -1656,6 +1656,11 @@ int jbd2_journal_load(journal_t *journal)
 		       journal->j_devname);
 		return -EFSCORRUPTED;
 	}
+	/*
+	 * clear JBD2_ABORT flag initialized in journal_init_common
+	 * here to update log tail information with the newest seq.
+	 */
+	journal->j_flags &= ~JBD2_ABORT;
 
 	/* OK, we've finished with the dynamic journal bits:
 	 * reinitialise the dynamic contents of the superblock in memory
@@ -1663,7 +1668,6 @@ int jbd2_journal_load(journal_t *journal)
 	if (journal_reset(journal))
 		goto recovery_error;
 
-	journal->j_flags &= ~JBD2_ABORT;
 	journal->j_flags |= JBD2_LOADED;
 	return 0;
 
@@ -2082,12 +2086,10 @@ static void __journal_abort_soft (journal_t *journal, int errno)
 
 	__jbd2_journal_abort_hard(journal);
 
-	if (errno) {
-		jbd2_journal_update_sb_errno(journal);
-		write_lock(&journal->j_state_lock);
-		journal->j_flags |= JBD2_REC_ERR;
-		write_unlock(&journal->j_state_lock);
-	}
+	jbd2_journal_update_sb_errno(journal);
+	write_lock(&journal->j_state_lock);
+	journal->j_flags |= JBD2_REC_ERR;
+	write_unlock(&journal->j_state_lock);
 }
 
 /**
@@ -2129,11 +2131,6 @@ static void __journal_abort_soft (journal_t *journal, int errno)
  * failure to disk.  ext3_error, for example, now uses this
  * functionality.
  *
- * Errors which originate from within the journaling layer will NOT
- * supply an errno; a null errno implies that absolutely no further
- * writes are done to the journal (unless there are any already in
- * progress).
- *
  */
 
 void jbd2_journal_abort(journal_t *journal, int errno)
diff --git a/fs/jbd2/transaction.c b/fs/jbd2/transaction.c
index c34433432d..6457023d8f 100644
--- a/fs/jbd2/transaction.c
+++ b/fs/jbd2/transaction.c
@@ -2223,14 +2223,16 @@ static int journal_unmap_buffer(journal_t *journal, struct buffer_head *bh,
 			return -EBUSY;
 		}
 		/*
-		 * OK, buffer won't be reachable after truncate. We just set
-		 * j_next_transaction to the running transaction (if there is
-		 * one) and mark buffer as freed so that commit code knows it
-		 * should clear dirty bits when it is done with the buffer.
+		 * OK, buffer won't be reachable after truncate. We just clear
+		 * b_modified to not confuse transaction credit accounting, and
+		 * set j_next_transaction to the running transaction (if there
+		 * is one) and mark buffer as freed so that commit code knows
+		 * it should clear dirty bits when it is done with the buffer.
 		 */
 		set_buffer_freed(bh);
 		if (journal->j_running_transaction && buffer_jbddirty(bh))
 			jh->b_next_transaction = journal->j_running_transaction;
+		jh->b_modified = 0;
 		jbd2_journal_put_journal_head(jh);
 		spin_unlock(&journal->j_list_lock);
 		jbd_unlock_bh_state(bh);
diff --git a/fs/nfs/Kconfig b/fs/nfs/Kconfig
index b1daeafbea..c342876733 100644
--- a/fs/nfs/Kconfig
+++ b/fs/nfs/Kconfig
@@ -89,7 +89,7 @@ config NFS_V4
 config NFS_SWAP
 	bool "Provide swap over NFS support"
 	default n
-	depends on NFS_FS
+	depends on NFS_FS && SWAP
 	select SUNRPC_SWAP
 	help
 	  This option enables swapon to work on files located on NFS mounts.
diff --git a/fs/ocfs2/journal.h b/fs/ocfs2/journal.h
index f4cd3c3e9f..0a4d2cbf51 100644
--- a/fs/ocfs2/journal.h
+++ b/fs/ocfs2/journal.h
@@ -637,9 +637,11 @@ static inline void ocfs2_update_inode_fsync_trans(handle_t *handle,
 {
 	struct ocfs2_inode_info *oi = OCFS2_I(inode);
 
-	oi->i_sync_tid = handle->h_transaction->t_tid;
-	if (datasync)
-		oi->i_datasync_tid = handle->h_transaction->t_tid;
+	if (!is_handle_aborted(handle)) {
+		oi->i_sync_tid = handle->h_transaction->t_tid;
+		if (datasync)
+			oi->i_datasync_tid = handle->h_transaction->t_tid;
+	}
 }
 
 #endif /* OCFS2_JOURNAL_H */
diff --git a/fs/reiserfs/stree.c b/fs/reiserfs/stree.c
index 24cbe01324..e3a4cbad96 100644
--- a/fs/reiserfs/stree.c
+++ b/fs/reiserfs/stree.c
@@ -2249,7 +2249,8 @@ int reiserfs_insert_item(struct reiserfs_transaction_handle *th,
 	/* also releases the path */
 	unfix_nodes(&s_ins_balance);
 #ifdef REISERQUOTA_DEBUG
-	reiserfs_debug(th->t_super, REISERFS_DEBUG_CODE,
+	if (inode)
+		reiserfs_debug(th->t_super, REISERFS_DEBUG_CODE,
 		       "reiserquota insert_item(): freeing %u id=%u type=%c",
 		       quota_bytes, inode->i_uid, head2type(ih));
 #endif
diff --git a/fs/reiserfs/super.c b/fs/reiserfs/super.c
index 519bf410e6..f9796fd515 100644
--- a/fs/reiserfs/super.c
+++ b/fs/reiserfs/super.c
@@ -1921,7 +1921,7 @@ static int reiserfs_fill_super(struct super_block *s, void *data, int silent)
 		if (!sbi->s_jdev) {
 			SWARN(silent, s, "", "Cannot allocate memory for "
 				"journal device name");
-			goto error;
+			goto error_unlocked;
 		}
 	}
 #ifdef CONFIG_QUOTA
diff --git a/fs/ubifs/file.c b/fs/ubifs/file.c
index b895af7d8d..e6d0a7df34 100644
--- a/fs/ubifs/file.c
+++ b/fs/ubifs/file.c
@@ -782,8 +782,9 @@ static int ubifs_do_bulk_read(struct ubifs_info *c, struct bu_info *bu,
 
 		if (page_offset > end_index)
 			break;
-		page = find_or_create_page(mapping, page_offset,
-					   GFP_NOFS | __GFP_COLD);
+		page = pagecache_get_page(mapping, page_offset,
+				 FGP_LOCK|FGP_ACCESSED|FGP_CREAT|FGP_NOWAIT,
+				 GFP_NOFS | __GFP_COLD);
 		if (!page)
 			break;
 		if (!PageUptodate(page))
diff --git a/include/linux/list_nulls.h b/include/linux/list_nulls.h
index 444d2b1313..703928e4fd 100644
--- a/include/linux/list_nulls.h
+++ b/include/linux/list_nulls.h
@@ -66,10 +66,10 @@ static inline void hlist_nulls_add_head(struct hlist_nulls_node *n,
 	struct hlist_nulls_node *first = h->first;
 
 	n->next = first;
-	n->pprev = &h->first;
+	WRITE_ONCE(n->pprev, &h->first);
 	h->first = n;
 	if (!is_a_nulls(first))
-		first->pprev = &n->next;
+		WRITE_ONCE(first->pprev, &n->next);
 }
 
 static inline void __hlist_nulls_del(struct hlist_nulls_node *n)
@@ -79,13 +79,13 @@ static inline void __hlist_nulls_del(struct hlist_nulls_node *n)
 
 	WRITE_ONCE(*pprev, next);
 	if (!is_a_nulls(next))
-		next->pprev = pprev;
+		WRITE_ONCE(next->pprev, pprev);
 }
 
 static inline void hlist_nulls_del(struct hlist_nulls_node *n)
 {
 	__hlist_nulls_del(n);
-	n->pprev = LIST_POISON2;
+	WRITE_ONCE(n->pprev, LIST_POISON2);
 }
 
 /**
diff --git a/include/linux/rculist_nulls.h b/include/linux/rculist_nulls.h
index 1c33dd7da4..f35dc0a1d6 100644
--- a/include/linux/rculist_nulls.h
+++ b/include/linux/rculist_nulls.h
@@ -33,7 +33,7 @@ static inline void hlist_nulls_del_init_rcu(struct hlist_nulls_node *n)
 {
 	if (!hlist_nulls_unhashed(n)) {
 		__hlist_nulls_del(n);
-		n->pprev = NULL;
+		WRITE_ONCE(n->pprev, NULL);
 	}
 }
 
@@ -65,7 +65,7 @@ static inline void hlist_nulls_del_init_rcu(struct hlist_nulls_node *n)
 static inline void hlist_nulls_del_rcu(struct hlist_nulls_node *n)
 {
 	__hlist_nulls_del(n);
-	n->pprev = LIST_POISON2;
+	WRITE_ONCE(n->pprev, LIST_POISON2);
 }
 
 /**
@@ -93,10 +93,10 @@ static inline void hlist_nulls_add_head_rcu(struct hlist_nulls_node *n,
 	struct hlist_nulls_node *first = h->first;
 
 	n->next = first;
-	n->pprev = &h->first;
+	WRITE_ONCE(n->pprev, &h->first);
 	rcu_assign_pointer(hlist_nulls_first_rcu(h), n);
 	if (!is_a_nulls(first))
-		first->pprev = &n->next;
+		WRITE_ONCE(first->pprev, &n->next);
 }
 /**
  * hlist_nulls_for_each_entry_rcu - iterate over rcu list of given type
diff --git a/include/scsi/iscsi_proto.h b/include/scsi/iscsi_proto.h
index 1a2ae0862e..c1260d80ef 100644
--- a/include/scsi/iscsi_proto.h
+++ b/include/scsi/iscsi_proto.h
@@ -638,7 +638,6 @@ struct iscsi_reject {
 #define ISCSI_REASON_BOOKMARK_INVALID	9
 #define ISCSI_REASON_BOOKMARK_NO_RESOURCES	10
 #define ISCSI_REASON_NEGOTIATION_RESET	11
-#define ISCSI_REASON_WAITING_FOR_LOGOUT	12
 
 /* Max. number of Key=Value pairs in a text message */
 #define MAX_KEY_VALUE_PAIRS	8192
diff --git a/include/sound/rawmidi.h b/include/sound/rawmidi.h
index 3b91ad5d51..27b2c653d2 100644
--- a/include/sound/rawmidi.h
+++ b/include/sound/rawmidi.h
@@ -92,9 +92,9 @@ struct snd_rawmidi_substream {
 	struct list_head list;		/* list of all substream for given stream */
 	int stream;			/* direction */
 	int number;			/* substream number */
-	unsigned int opened: 1,		/* open flag */
-		     append: 1,		/* append flag (merge more streams) */
-		     active_sensing: 1; /* send active sensing when close */
+	bool opened;			/* open flag */
+	bool append;			/* append flag (merge more streams) */
+	bool active_sensing;		/* send active sensing when close */
 	int use_count;			/* use counter (for output) */
 	size_t bytes;
 	struct snd_rawmidi *rmidi;
diff --git a/ipc/sem.c b/ipc/sem.c
index 9862c3d1c2..9963ed351b 100644
--- a/ipc/sem.c
+++ b/ipc/sem.c
@@ -2151,11 +2151,9 @@ void exit_sem(struct task_struct *tsk)
 		ipc_assert_locked_object(&sma->sem_perm);
 		list_del(&un->list_id);
 
-		/* we are the last process using this ulp, acquiring ulp->lock
-		 * isn't required. Besides that, we are also protected against
-		 * IPC_RMID as we hold sma->sem_perm lock now
-		 */
+		spin_lock(&ulp->lock);
 		list_del_rcu(&un->list_proc);
+		spin_unlock(&ulp->lock);
 
 		/* perform adjustments registered in un */
 		for (i = 0; i < sma->sem_nsems; i++) {
diff --git a/kernel/padata.c b/kernel/padata.c
index 282b489a28..0d7ec5fd52 100644
--- a/kernel/padata.c
+++ b/kernel/padata.c
@@ -33,6 +33,8 @@
 
 #define MAX_OBJ_NUM 1000
 
+static void padata_free_pd(struct parallel_data *pd);
+
 static int padata_index_to_cpu(struct parallel_data *pd, int cpu_index)
 {
 	int cpu, target_cpu;
@@ -300,6 +302,7 @@ static void padata_serial_worker(struct work_struct *serial_work)
 	struct padata_serial_queue *squeue;
 	struct parallel_data *pd;
 	LIST_HEAD(local_list);
+	int cnt;
 
 	local_bh_disable();
 	squeue = container_of(serial_work, struct padata_serial_queue, work);
@@ -309,6 +312,8 @@ static void padata_serial_worker(struct work_struct *serial_work)
 	list_replace_init(&squeue->serial.list, &local_list);
 	spin_unlock(&squeue->serial.lock);
 
+	cnt = 0;
+
 	while (!list_empty(&local_list)) {
 		struct padata_priv *padata;
 
@@ -318,9 +323,12 @@ static void padata_serial_worker(struct work_struct *serial_work)
 		list_del_init(&padata->list);
 
 		padata->serial(padata);
-		atomic_dec(&pd->refcnt);
+		cnt++;
 	}
 	local_bh_enable();
+
+	if (atomic_sub_and_test(cnt, &pd->refcnt))
+		padata_free_pd(pd);
 }
 
 /**
@@ -443,7 +451,7 @@ static struct parallel_data *padata_alloc_pd(struct padata_instance *pinst,
 	setup_timer(&pd->timer, padata_reorder_timer, (unsigned long)pd);
 	atomic_set(&pd->seq_nr, -1);
 	atomic_set(&pd->reorder_objects, 0);
-	atomic_set(&pd->refcnt, 0);
+	atomic_set(&pd->refcnt, 1);
 	pd->pinst = pinst;
 	spin_lock_init(&pd->lock);
 
@@ -468,31 +476,6 @@ static void padata_free_pd(struct parallel_data *pd)
 	kfree(pd);
 }
 
-/* Flush all objects out of the padata queues. */
-static void padata_flush_queues(struct parallel_data *pd)
-{
-	int cpu;
-	struct padata_parallel_queue *pqueue;
-	struct padata_serial_queue *squeue;
-
-	for_each_cpu(cpu, pd->cpumask.pcpu) {
-		pqueue = per_cpu_ptr(pd->pqueue, cpu);
-		flush_work(&pqueue->work);
-	}
-
-	del_timer_sync(&pd->timer);
-
-	if (atomic_read(&pd->reorder_objects))
-		padata_reorder(pd);
-
-	for_each_cpu(cpu, pd->cpumask.cbcpu) {
-		squeue = per_cpu_ptr(pd->squeue, cpu);
-		flush_work(&squeue->work);
-	}
-
-	BUG_ON(atomic_read(&pd->refcnt) != 0);
-}
-
 static void __padata_start(struct padata_instance *pinst)
 {
 	pinst->flags |= PADATA_INIT;
@@ -506,10 +489,6 @@ static void __padata_stop(struct padata_instance *pinst)
 	pinst->flags &= ~PADATA_INIT;
 
 	synchronize_rcu();
-
-	get_online_cpus();
-	padata_flush_queues(pinst->pd);
-	put_online_cpus();
 }
 
 /* Replace the internal control structure with a new one. */
@@ -530,8 +509,8 @@ static void padata_replace(struct padata_instance *pinst,
 	if (!cpumask_equal(pd_old->cpumask.cbcpu, pd_new->cpumask.cbcpu))
 		notification_mask |= PADATA_CPU_SERIAL;
 
-	padata_flush_queues(pd_old);
-	padata_free_pd(pd_old);
+	if (atomic_dec_and_test(&pd_old->refcnt))
+		padata_free_pd(pd_old);
 
 	if (notification_mask)
 		blocking_notifier_call_chain(&pinst->cpumask_change_notifier,
diff --git a/kernel/trace/trace_events_trigger.c b/kernel/trace/trace_events_trigger.c
index 8be66a2b0c..6524920c6e 100644
--- a/kernel/trace/trace_events_trigger.c
+++ b/kernel/trace/trace_events_trigger.c
@@ -121,9 +121,10 @@ static void *trigger_next(struct seq_file *m, void *t, loff_t *pos)
 {
 	struct trace_event_file *event_file = event_file_data(m->private);
 
-	if (t == SHOW_AVAILABLE_TRIGGERS)
+	if (t == SHOW_AVAILABLE_TRIGGERS) {
+		(*pos)++;
 		return NULL;
-
+	}
 	return seq_list_next(t, &event_file->triggers, pos);
 }
 
diff --git a/kernel/trace/trace_stat.c b/kernel/trace/trace_stat.c
index 6cf9353167..a2081a7f0c 100644
--- a/kernel/trace/trace_stat.c
+++ b/kernel/trace/trace_stat.c
@@ -302,7 +302,7 @@ static int init_stat_file(struct stat_session *session)
 int register_stat_tracer(struct tracer_stat *trace)
 {
 	struct stat_session *session, *node;
-	int ret;
+	int ret = -EINVAL;
 
 	if (!trace)
 		return -EINVAL;
@@ -313,17 +313,15 @@ int register_stat_tracer(struct tracer_stat *trace)
 	/* Already registered? */
 	mutex_lock(&all_stat_sessions_mutex);
 	list_for_each_entry(node, &all_stat_sessions, session_list) {
-		if (node->ts == trace) {
-			mutex_unlock(&all_stat_sessions_mutex);
-			return -EINVAL;
-		}
+		if (node->ts == trace)
+			goto out;
 	}
-	mutex_unlock(&all_stat_sessions_mutex);
 
+	ret = -ENOMEM;
 	/* Init the session */
 	session = kzalloc(sizeof(*session), GFP_KERNEL);
 	if (!session)
-		return -ENOMEM;
+		goto out;
 
 	session->ts = trace;
 	INIT_LIST_HEAD(&session->session_list);
@@ -332,15 +330,16 @@ int register_stat_tracer(struct tracer_stat *trace)
 	ret = init_stat_file(session);
 	if (ret) {
 		destroy_session(session);
-		return ret;
+		goto out;
 	}
 
+	ret = 0;
 	/* Register */
-	mutex_lock(&all_stat_sessions_mutex);
 	list_add_tail(&session->session_list, &all_stat_sessions);
+ out:
 	mutex_unlock(&all_stat_sessions_mutex);
 
-	return 0;
+	return ret;
 }
 
 void unregister_stat_tracer(struct tracer_stat *trace)
diff --git a/lib/scatterlist.c b/lib/scatterlist.c
index 0b86b7992f..1875c09eed 100644
--- a/lib/scatterlist.c
+++ b/lib/scatterlist.c
@@ -317,7 +317,7 @@ int __sg_alloc_table(struct sg_table *table, unsigned int nents,
 			if (prv)
 				table->nents = ++table->orig_nents;
 
- 			return -ENOMEM;
+			return -ENOMEM;
 		}
 
 		sg_init_table(sg, alloc_size);
diff --git a/net/netfilter/xt_bpf.c b/net/netfilter/xt_bpf.c
index dffee9d47e..7b993f25aa 100644
--- a/net/netfilter/xt_bpf.c
+++ b/net/netfilter/xt_bpf.c
@@ -25,6 +25,9 @@ static int bpf_mt_check(const struct xt_mtchk_param *par)
 	struct xt_bpf_info *info = par->matchinfo;
 	struct sock_fprog_kern program;
 
+	if (info->bpf_program_num_elem > XT_BPF_MAX_NUM_INSTR)
+		return -EINVAL;
+
 	program.len = info->bpf_program_num_elem;
 	program.filter = info->bpf_program;
 
diff --git a/scripts/kconfig/confdata.c b/scripts/kconfig/confdata.c
index 138d7f100f..4216940e87 100644
--- a/scripts/kconfig/confdata.c
+++ b/scripts/kconfig/confdata.c
@@ -1236,7 +1236,7 @@ bool conf_set_all_new_symbols(enum conf_def_mode mode)
 
 		sym_calc_value(csym);
 		if (mode == def_random)
-			has_changed = randomize_choice_values(csym);
+			has_changed |= randomize_choice_values(csym);
 		else {
 			set_all_choice_values(csym);
 			has_changed = true;
diff --git a/security/selinux/avc.c b/security/selinux/avc.c
index 52f3c550ab..f3c473791b 100644
--- a/security/selinux/avc.c
+++ b/security/selinux/avc.c
@@ -865,7 +865,7 @@ static int avc_update_node(u32 event, u32 perms, u8 driver, u8 xperm, u32 ssid,
 	if (orig->ae.xp_node) {
 		rc = avc_xperms_populate(node, orig->ae.xp_node);
 		if (rc) {
-			kmem_cache_free(avc_node_cachep, node);
+			avc_node_kill(node);
 			goto out_unlock;
 		}
 	}
diff --git a/sound/core/seq/seq_clientmgr.c b/sound/core/seq/seq_clientmgr.c
index 331a2b00e5..4c31db1246 100644
--- a/sound/core/seq/seq_clientmgr.c
+++ b/sound/core/seq/seq_clientmgr.c
@@ -577,7 +577,7 @@ static int update_timestamp_of_queue(struct snd_seq_event *event,
 	event->queue = queue;
 	event->flags &= ~SNDRV_SEQ_TIME_STAMP_MASK;
 	if (real_time) {
-		event->time.time = snd_seq_timer_get_cur_time(q->timer);
+		event->time.time = snd_seq_timer_get_cur_time(q->timer, true);
 		event->flags |= SNDRV_SEQ_TIME_STAMP_REAL;
 	} else {
 		event->time.tick = snd_seq_timer_get_cur_tick(q->timer);
@@ -1694,7 +1694,7 @@ static int snd_seq_ioctl_get_queue_status(struct snd_seq_client *client,
 	tmr = queue->timer;
 	status.events = queue->tickq->cells + queue->timeq->cells;
 
-	status.time = snd_seq_timer_get_cur_time(tmr);
+	status.time = snd_seq_timer_get_cur_time(tmr, true);
 	status.tick = snd_seq_timer_get_cur_tick(tmr);
 
 	status.running = tmr->running;
diff --git a/sound/core/seq/seq_queue.c b/sound/core/seq/seq_queue.c
index 1a6dc4ff44..ea1aa07962 100644
--- a/sound/core/seq/seq_queue.c
+++ b/sound/core/seq/seq_queue.c
@@ -261,6 +261,8 @@ void snd_seq_check_queue(struct snd_seq_queue *q, int atomic, int hop)
 {
 	unsigned long flags;
 	struct snd_seq_event_cell *cell;
+	snd_seq_tick_time_t cur_tick;
+	snd_seq_real_time_t cur_time;
 
 	if (q == NULL)
 		return;
@@ -277,17 +279,18 @@ void snd_seq_check_queue(struct snd_seq_queue *q, int atomic, int hop)
 
       __again:
 	/* Process tick queue... */
+	cur_tick = snd_seq_timer_get_cur_tick(q->timer);
 	for (;;) {
-		cell = snd_seq_prioq_cell_out(q->tickq,
-					      &q->timer->tick.cur_tick);
+		cell = snd_seq_prioq_cell_out(q->tickq, &cur_tick);
 		if (!cell)
 			break;
 		snd_seq_dispatch_event(cell, atomic, hop);
 	}
 
 	/* Process time queue... */
+	cur_time = snd_seq_timer_get_cur_time(q->timer, false);
 	for (;;) {
-		cell = snd_seq_prioq_cell_out(q->timeq, &q->timer->cur_time);
+		cell = snd_seq_prioq_cell_out(q->timeq, &cur_time);
 		if (!cell)
 			break;
 		snd_seq_dispatch_event(cell, atomic, hop);
@@ -415,6 +418,7 @@ int snd_seq_queue_check_access(int queueid, int client)
 int snd_seq_queue_set_owner(int queueid, int client, int locked)
 {
 	struct snd_seq_queue *q = queueptr(queueid);
+	unsigned long flags;
 
 	if (q == NULL)
 		return -EINVAL;
@@ -424,8 +428,10 @@ int snd_seq_queue_set_owner(int queueid, int client, int locked)
 		return -EPERM;
 	}
 
+	spin_lock_irqsave(&q->owner_lock, flags);
 	q->locked = locked ? 1 : 0;
 	q->owner = client;
+	spin_unlock_irqrestore(&q->owner_lock, flags);
 	queue_access_unlock(q);
 	queuefree(q);
 
@@ -564,15 +570,17 @@ void snd_seq_queue_client_termination(int client)
 	unsigned long flags;
 	int i;
 	struct snd_seq_queue *q;
+	bool matched;
 
 	for (i = 0; i < SNDRV_SEQ_MAX_QUEUES; i++) {
 		if ((q = queueptr(i)) == NULL)
 			continue;
 		spin_lock_irqsave(&q->owner_lock, flags);
-		if (q->owner == client)
+		matched = (q->owner == client);
+		if (matched)
 			q->klocked = 1;
 		spin_unlock_irqrestore(&q->owner_lock, flags);
-		if (q->owner == client) {
+		if (matched) {
 			if (q->timer->running)
 				snd_seq_timer_stop(q->timer);
 			snd_seq_timer_reset(q->timer);
@@ -764,6 +772,8 @@ void snd_seq_info_queues_read(struct snd_info_entry *entry,
 	int i, bpm;
 	struct snd_seq_queue *q;
 	struct snd_seq_timer *tmr;
+	bool locked;
+	int owner;
 
 	for (i = 0; i < SNDRV_SEQ_MAX_QUEUES; i++) {
 		if ((q = queueptr(i)) == NULL)
@@ -775,9 +785,14 @@ void snd_seq_info_queues_read(struct snd_info_entry *entry,
 		else
 			bpm = 0;
 
+		spin_lock_irq(&q->owner_lock);
+		locked = q->locked;
+		owner = q->owner;
+		spin_unlock_irq(&q->owner_lock);
+
 		snd_iprintf(buffer, "queue %d: [%s]\n", q->queue, q->name);
-		snd_iprintf(buffer, "owned by client    : %d\n", q->owner);
-		snd_iprintf(buffer, "lock status        : %s\n", q->locked ? "Locked" : "Free");
+		snd_iprintf(buffer, "owned by client    : %d\n", owner);
+		snd_iprintf(buffer, "lock status        : %s\n", locked ? "Locked" : "Free");
 		snd_iprintf(buffer, "queued time events : %d\n", snd_seq_prioq_avail(q->timeq));
 		snd_iprintf(buffer, "queued tick events : %d\n", snd_seq_prioq_avail(q->tickq));
 		snd_iprintf(buffer, "timer state        : %s\n", tmr->running ? "Running" : "Stopped");
diff --git a/sound/core/seq/seq_timer.c b/sound/core/seq/seq_timer.c
index c526201fd0..adc820f874 100644
--- a/sound/core/seq/seq_timer.c
+++ b/sound/core/seq/seq_timer.c
@@ -436,14 +436,15 @@ int snd_seq_timer_continue(struct snd_seq_timer *tmr)
 }
 
 /* return current 'real' time. use timeofday() to get better granularity. */
-snd_seq_real_time_t snd_seq_timer_get_cur_time(struct snd_seq_timer *tmr)
+snd_seq_real_time_t snd_seq_timer_get_cur_time(struct snd_seq_timer *tmr,
+					       bool adjust_ktime)
 {
 	snd_seq_real_time_t cur_time;
 	unsigned long flags;
 
 	spin_lock_irqsave(&tmr->lock, flags);
 	cur_time = tmr->cur_time;
-	if (tmr->running) { 
+	if (adjust_ktime && tmr->running) {
 		struct timeval tm;
 		int usec;
 		do_gettimeofday(&tm);
@@ -465,7 +466,13 @@ snd_seq_real_time_t snd_seq_timer_get_cur_time(struct snd_seq_timer *tmr)
  high PPQ values) */
 snd_seq_tick_time_t snd_seq_timer_get_cur_tick(struct snd_seq_timer *tmr)
 {
-	return tmr->tick.cur_tick;
+	snd_seq_tick_time_t cur_tick;
+	unsigned long flags;
+
+	spin_lock_irqsave(&tmr->lock, flags);
+	cur_tick = tmr->tick.cur_tick;
+	spin_unlock_irqrestore(&tmr->lock, flags);
+	return cur_tick;
 }
 
 
diff --git a/sound/core/seq/seq_timer.h b/sound/core/seq/seq_timer.h
index 88dfb71805..6221a43c30 100644
--- a/sound/core/seq/seq_timer.h
+++ b/sound/core/seq/seq_timer.h
@@ -135,7 +135,8 @@ int snd_seq_timer_set_ppq(struct snd_seq_timer *tmr, int ppq);
 int snd_seq_timer_set_position_tick(struct snd_seq_timer *tmr, snd_seq_tick_time_t position);
 int snd_seq_timer_set_position_time(struct snd_seq_timer *tmr, snd_seq_real_time_t position);
 int snd_seq_timer_set_skew(struct snd_seq_timer *tmr, unsigned int skew, unsigned int base);
-snd_seq_real_time_t snd_seq_timer_get_cur_time(struct snd_seq_timer *tmr);
+snd_seq_real_time_t snd_seq_timer_get_cur_time(struct snd_seq_timer *tmr,
+					       bool adjust_ktime);
 snd_seq_tick_time_t snd_seq_timer_get_cur_tick(struct snd_seq_timer *tmr);
 
 extern int seq_default_timer_class;
diff --git a/sound/pci/hda/hda_codec.c b/sound/pci/hda/hda_codec.c
index ad0b23a21b..16664b07b5 100644
--- a/sound/pci/hda/hda_codec.c
+++ b/sound/pci/hda/hda_codec.c
@@ -4098,7 +4098,7 @@ void snd_print_pcm_bits(int pcm, char *buf, int buflen)
 
 	for (i = 0, j = 0; i < ARRAY_SIZE(bits); i++)
 		if (pcm & (AC_SUPPCM_BITS_8 << i))
-			j += snprintf(buf + j, buflen - j,  " %d", bits[i]);
+			j += scnprintf(buf + j, buflen - j,  " %d", bits[i]);
 
 	buf[j] = '\0'; /* necessary when j == 0 */
 }
diff --git a/sound/pci/hda/hda_eld.c b/sound/pci/hda/hda_eld.c
index 563984dd25..d469c76b5e 100644
--- a/sound/pci/hda/hda_eld.c
+++ b/sound/pci/hda/hda_eld.c
@@ -385,7 +385,7 @@ static void hdmi_print_pcm_rates(int pcm, char *buf, int buflen)
 
 	for (i = 0, j = 0; i < ARRAY_SIZE(alsa_rates); i++)
 		if (pcm & (1 << i))
-			j += snprintf(buf + j, buflen - j,  " %d",
+			j += scnprintf(buf + j, buflen - j,  " %d",
 				alsa_rates[i]);
 
 	buf[j] = '\0'; /* necessary when j == 0 */
diff --git a/sound/pci/hda/hda_sysfs.c b/sound/pci/hda/hda_sysfs.c
index 9739fce9e0..f3ac19d33b 100644
--- a/sound/pci/hda/hda_sysfs.c
+++ b/sound/pci/hda/hda_sysfs.c
@@ -221,7 +221,7 @@ static ssize_t init_verbs_show(struct device *dev,
 	mutex_lock(&codec->user_mutex);
 	for (i = 0; i < codec->init_verbs.used; i++) {
 		struct hda_verb *v = snd_array_elem(&codec->init_verbs, i);
-		len += snprintf(buf + len, PAGE_SIZE - len,
+		len += scnprintf(buf + len, PAGE_SIZE - len,
 				"0x%02x 0x%03x 0x%04x\n",
 				v->nid, v->verb, v->param);
 	}
@@ -271,7 +271,7 @@ static ssize_t hints_show(struct device *dev,
 	mutex_lock(&codec->user_mutex);
 	for (i = 0; i < codec->hints.used; i++) {
 		struct hda_hint *hint = snd_array_elem(&codec->hints, i);
-		len += snprintf(buf + len, PAGE_SIZE - len,
+		len += scnprintf(buf + len, PAGE_SIZE - len,
 				"%s = %s\n", hint->key, hint->val);
 	}
 	mutex_unlock(&codec->user_mutex);
diff --git a/sound/pci/hda/patch_conexant.c b/sound/pci/hda/patch_conexant.c
index 05e745e2f4..3150ddfbdb 100644
--- a/sound/pci/hda/patch_conexant.c
+++ b/sound/pci/hda/patch_conexant.c
@@ -866,6 +866,7 @@ static const struct snd_pci_quirk cxt5066_fixups[] = {
 	SND_PCI_QUIRK(0x17aa, 0x215f, "Lenovo T510", CXT_PINCFG_LENOVO_TP410),
 	SND_PCI_QUIRK(0x17aa, 0x21ce, "Lenovo T420", CXT_PINCFG_LENOVO_TP410),
 	SND_PCI_QUIRK(0x17aa, 0x21cf, "Lenovo T520", CXT_PINCFG_LENOVO_TP410),
+	SND_PCI_QUIRK(0x17aa, 0x21d2, "Lenovo T420s", CXT_PINCFG_LENOVO_TP410),
 	SND_PCI_QUIRK(0x17aa, 0x21da, "Lenovo X220", CXT_PINCFG_LENOVO_TP410),
 	SND_PCI_QUIRK(0x17aa, 0x21db, "Lenovo X220-tablet", CXT_PINCFG_LENOVO_TP410),
 	SND_PCI_QUIRK(0x17aa, 0x38af, "Lenovo IdeaPad Z560", CXT_FIXUP_MUTE_LED_EAPD),
diff --git a/sound/sh/aica.c b/sound/sh/aica.c
index ad3d9ae380..dd601b39f6 100644
--- a/sound/sh/aica.c
+++ b/sound/sh/aica.c
@@ -120,10 +120,10 @@ static void spu_memset(u32 toi, u32 what, int length)
 }
 
 /* spu_memload - write to SPU address space */
-static void spu_memload(u32 toi, void *from, int length)
+static void spu_memload(u32 toi, const void *from, int length)
 {
 	unsigned long flags;
-	u32 *froml = from;
+	const u32 *froml = from;
 	u32 __iomem *to = (u32 __iomem *) (SPU_MEMORY_BASE + toi);
 	int i;
 	u32 val;
diff --git a/sound/soc/atmel/Kconfig b/sound/soc/atmel/Kconfig
index 2d30464b81..d7b471c69f 100644
--- a/sound/soc/atmel/Kconfig
+++ b/sound/soc/atmel/Kconfig
@@ -24,6 +24,8 @@ config SND_ATMEL_SOC_DMA
 
 config SND_ATMEL_SOC_SSC_DMA
 	tristate
+	select SND_ATMEL_SOC_DMA
+	select SND_ATMEL_SOC_PDC
 
 config SND_ATMEL_SOC_SSC
 	tristate
diff --git a/sound/usb/quirks.c b/sound/usb/quirks.c
index 5fb0b02135..8e791b1b7c 100644
--- a/sound/usb/quirks.c
+++ b/sound/usb/quirks.c
@@ -1153,6 +1153,7 @@ bool snd_usb_get_sample_rate_quirk(struct snd_usb_audio *chip)
 	case USB_ID(0x1de7, 0x0014): /* Phoenix Audio TMX320 */
 	case USB_ID(0x1de7, 0x0114): /* Phoenix Audio MT202pcs */
 	case USB_ID(0x21B4, 0x0081): /* AudioQuest DragonFly */
+	case USB_ID(0x2912, 0x30c8): /* Audioengine D1 */
 		return true;
 	}
 	return false;
diff --git a/sound/usb/usx2y/usX2Yhwdep.c b/sound/usb/usx2y/usX2Yhwdep.c
index 0b34dbc8f3..7dcb33d388 100644
--- a/sound/usb/usx2y/usX2Yhwdep.c
+++ b/sound/usb/usx2y/usX2Yhwdep.c
@@ -132,7 +132,7 @@ static int snd_usX2Y_hwdep_dsp_status(struct snd_hwdep *hw,
 	info->num_dsps = 2;		// 0: Prepad Data, 1: FPGA Code
 	if (us428->chip_status & USX2Y_STAT_CHIP_INIT)
 		info->chip_ready = 1;
- 	info->version = USX2Y_DRIVER_VERSION; 
+	info->version = USX2Y_DRIVER_VERSION;
 	return 0;
 }
 
diff --git a/tools/usb/usbip/src/usbip_network.c b/tools/usb/usbip/src/usbip_network.c
index b4c37e76a6..187dfaa67d 100644
--- a/tools/usb/usbip/src/usbip_network.c
+++ b/tools/usb/usbip/src/usbip_network.c
@@ -62,39 +62,39 @@ void usbip_setup_port_number(char *arg)
 	info("using port %d (\"%s\")", usbip_port, usbip_port_string);
 }
 
-void usbip_net_pack_uint32_t(int pack, uint32_t *num)
+uint32_t usbip_net_pack_uint32_t(int pack, uint32_t num)
 {
 	uint32_t i;
 
 	if (pack)
-		i = htonl(*num);
+		i = htonl(num);
 	else
-		i = ntohl(*num);
+		i = ntohl(num);
 
-	*num = i;
+	return i;
 }
 
-void usbip_net_pack_uint16_t(int pack, uint16_t *num)
+uint16_t usbip_net_pack_uint16_t(int pack, uint16_t num)
 {
 	uint16_t i;
 
 	if (pack)
-		i = htons(*num);
+		i = htons(num);
 	else
-		i = ntohs(*num);
+		i = ntohs(num);
 
-	*num = i;
+	return i;
 }
 
 void usbip_net_pack_usb_device(int pack, struct usbip_usb_device *udev)
 {
-	usbip_net_pack_uint32_t(pack, &udev->busnum);
-	usbip_net_pack_uint32_t(pack, &udev->devnum);
-	usbip_net_pack_uint32_t(pack, &udev->speed);
+	udev->busnum = usbip_net_pack_uint32_t(pack, udev->busnum);
+	udev->devnum = usbip_net_pack_uint32_t(pack, udev->devnum);
+	udev->speed = usbip_net_pack_uint32_t(pack, udev->speed);
 
-	usbip_net_pack_uint16_t(pack, &udev->idVendor);
-	usbip_net_pack_uint16_t(pack, &udev->idProduct);
-	usbip_net_pack_uint16_t(pack, &udev->bcdDevice);
+	udev->idVendor = usbip_net_pack_uint16_t(pack, udev->idVendor);
+	udev->idProduct = usbip_net_pack_uint16_t(pack, udev->idProduct);
+	udev->bcdDevice = usbip_net_pack_uint16_t(pack, udev->bcdDevice);
 }
 
 void usbip_net_pack_usb_interface(int pack __attribute__((unused)),
@@ -141,6 +141,14 @@ ssize_t usbip_net_send(int sockfd, void *buff, size_t bufflen)
 	return usbip_net_xmit(sockfd, buff, bufflen, 1);
 }
 
+static inline void usbip_net_pack_op_common(int pack,
+					    struct op_common *op_common)
+{
+	op_common->version = usbip_net_pack_uint16_t(pack, op_common->version);
+	op_common->code = usbip_net_pack_uint16_t(pack, op_common->code);
+	op_common->status = usbip_net_pack_uint32_t(pack, op_common->status);
+}
+
 int usbip_net_send_op_common(int sockfd, uint32_t code, uint32_t status)
 {
 	struct op_common op_common;
@@ -152,7 +160,7 @@ int usbip_net_send_op_common(int sockfd, uint32_t code, uint32_t status)
 	op_common.code    = code;
 	op_common.status  = status;
 
-	PACK_OP_COMMON(1, &op_common);
+	usbip_net_pack_op_common(1, &op_common);
 
 	rc = usbip_net_send(sockfd, &op_common, sizeof(op_common));
 	if (rc < 0) {
@@ -176,7 +184,7 @@ int usbip_net_recv_op_common(int sockfd, uint16_t *code)
 		goto err;
 	}
 
-	PACK_OP_COMMON(0, &op_common);
+	usbip_net_pack_op_common(0, &op_common);
 
 	if (op_common.version != USBIP_VERSION) {
 		dbg("version mismatch: %d %d", op_common.version,
diff --git a/tools/usb/usbip/src/usbip_network.h b/tools/usb/usbip/src/usbip_network.h
index c1e875cf10..573fa839b6 100644
--- a/tools/usb/usbip/src/usbip_network.h
+++ b/tools/usb/usbip/src/usbip_network.h
@@ -33,12 +33,6 @@ struct op_common {
 
 } __attribute__((packed));
 
-#define PACK_OP_COMMON(pack, op_common)  do {\
-	usbip_net_pack_uint16_t(pack, &(op_common)->version);\
-	usbip_net_pack_uint16_t(pack, &(op_common)->code);\
-	usbip_net_pack_uint32_t(pack, &(op_common)->status);\
-} while (0)
-
 /* ---------------------------------------------------------------------- */
 /* Dummy Code */
 #define OP_UNSPEC	0x00
@@ -164,11 +158,11 @@ struct op_devlist_reply_extra {
 } while (0)
 
 #define PACK_OP_DEVLIST_REPLY(pack, reply)  do {\
-	usbip_net_pack_uint32_t(pack, &(reply)->ndev);\
+	(reply)->ndev = usbip_net_pack_uint32_t(pack, (reply)->ndev);\
 } while (0)
 
-void usbip_net_pack_uint32_t(int pack, uint32_t *num);
-void usbip_net_pack_uint16_t(int pack, uint16_t *num);
+uint32_t usbip_net_pack_uint32_t(int pack, uint32_t num);
+uint16_t usbip_net_pack_uint16_t(int pack, uint16_t num);
 void usbip_net_pack_usb_device(int pack, struct usbip_usb_device *udev);
 void usbip_net_pack_usb_interface(int pack, struct usbip_usb_interface *uinf);
 

