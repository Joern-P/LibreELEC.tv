From 6389f48bee3c4d75e6b0cb8a84f8b385c3c9bef8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?j=C3=B6rn?= <ahap1@web.de>
Date: Tue, 27 Apr 2021 20:43:08 +0200
Subject: [PATCH] armbian patch

---
 arch/arm64/boot/dts/rockchip/rk3399.dtsi |  7 ++--
 drivers/pci/host/pcie-rockchip.c         | 41 ++++++++++++++++++++++--
 scripts/dtc/dtc-lexer.lex.c_shipped      |  2 +-
 3 files changed, 44 insertions(+), 6 deletions(-)

diff --git a/drivers/pci/host/pcie-rockchip.c b/drivers/pci/host/pcie-rockchip.c
index 22a53153c0b1..23dcdee42f25 100755
--- a/drivers/pci/host/pcie-rockchip.c
+++ b/drivers/pci/host/pcie-rockchip.c
@@ -26,6 +26,7 @@
 #include <linux/irqdomain.h>
 #include <linux/kernel.h>
 #include <linux/mfd/syscon.h>
+#include <linux/moduleparam.h>
 #include <linux/of_address.h>
 #include <linux/of_device.h>
 #include <linux/of_pci.h>
@@ -265,6 +266,7 @@ struct rockchip_pcie {
 	int wait_ep;
 	struct dma_trx_obj *dma_obj;
 	struct list_head resources;
+	u32	bus_scan_delay;	
 	struct pci_bus *root_bus;
 	struct resource *io;
 	bool pcie_really_probed;
@@ -272,6 +274,9 @@ struct rockchip_pcie {
 	int other_rw_disabled;
 };
 
+static int bus_scan_delay = -1;
+core_param(pcie_rk_bus_scan_delay, bus_scan_delay, int, S_IRUGO);
+
 static u32 rockchip_pcie_read(struct rockchip_pcie *rockchip, u32 reg)
 {
 	return readl(rockchip->apb_base + reg);
@@ -707,6 +715,14 @@ static int rockchip_pcie_init_port(struct rockchip_pcie *rockchip)
 	/* Enable Gen1 training */
 	rockchip_pcie_write(rockchip, PCIE_CLIENT_LINK_TRAIN_ENABLE,
 			    PCIE_CLIENT_CONFIG);
+			    
+	/*
+	 * According to PCI Express Card Electromechanical Specification
+	 * Revision 3.0, Table 2-4, power stable and reference clk stable
+	 * before PERST# inactive should be at least 100ms and 100us
+	 * respectively. Otherwise we do see some failures for link training.
+	 */
+	msleep(100);			    
 
 	gpiod_set_value(rockchip->ep_gpio, 1);
 
@@ -1134,6 +1150,14 @@ static int rockchip_pcie_parse_dt(struct rockchip_pcie *rockchip)
 			return -EPROBE_DEFER;
 		dev_info(dev, "no vpcie0v9 regulator found\n");
 	}
+	
+	err = of_property_read_u32(node, "bus-scan-delay-ms", &rockchip->bus_scan_delay);
+	if (err) {
+		dev_info(dev, "no bus-scan-delay-ms in device tree, default 0 ms\n");
+		rockchip->bus_scan_delay = 0;
+	} else {
+		dev_info(dev, "bus-scan-delay-ms in device tree is %u ms\n", rockchip->bus_scan_delay);
+	}	
 
 	mem = of_parse_phandle(node, "memory-region", 0);
 	if (!mem) {
@@ -1494,6 +1518,7 @@ static int rockchip_pcie_really_probe(struct rockchip_pcie *rockchip)
 	int err;
 	struct pci_bus *bus, *child;
 	struct	device *dev = rockchip->dev;
+	u32 delay = 0;
 
 	err = rockchip_pcie_init_port(rockchip);
 	if (err)
@@ -1505,6 +1530,18 @@ static int rockchip_pcie_really_probe(struct rockchip_pcie *rockchip)
 	if (err)
 		return err;
 
+	/* Prefer command-line param over device tree */
+	if (bus_scan_delay > 0) {
+		delay = bus_scan_delay;
+		dev_info(dev, "wait %u ms (from command-line) before bus scan\n", delay);
+	} else if (rockchip->bus_scan_delay > 0 && bus_scan_delay < 0) {
+		delay = rockchip->bus_scan_delay;
+		dev_info(dev, "wait %u ms (from device tree) before bus scan\n", delay);
+	}
+	if (delay > 0) {
+		msleep(delay);
+	}
+
 	bus = pci_scan_root_bus(dev, 0, &rockchip_pcie_ops,
 				rockchip, &rockchip->resources);
 	if (!bus)
